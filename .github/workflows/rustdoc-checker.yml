name: Rustdoc Accuracy Checker

on:
    schedule:
        - cron: "0 8 * * 2"
    workflow_dispatch:
        inputs:
            existing_branch:
                description: "Use existing branch (leave empty to create new)"
                required: false
                type: string
                default: ""

            packages:
                description: "Comma-separated packages (leave empty for all)"
                required: false
                type: string
                default: ""

            prompt_override:
                description: "Additional guidance or custom prompt"
                required: false
                type: string
                default: ""

            model:
                description: "Claude model to use (leave empty for latest default)"
                required: false
                type: choice
                options:
                    - ""
                    - "claude-sonnet-4-5-20250929"
                    - "claude-opus-4-1-20250805"
                    - "claude-opus-4-20250514"
                    - "claude-sonnet-4-20250514"
                    - "claude-3-7-sonnet-20250219"
                    - "claude-3-5-haiku-20241022"
                    - "claude-3-haiku-20240307"
                default: ""

            max_tokens:
                description: "Maximum tokens per request (leave empty for default)"
                required: false
                type: string
                default: ""

            max_turns:
                description: "Maximum conversation turns (leave empty for default)"
                required: false
                type: string
                default: ""

env:
    CARGO_TERM_COLOR: always

jobs:
    create-branch:
        name: Create or use existing branch
        runs-on: ubuntu-latest
        outputs:
            branch-name: ${{ steps.branch.outputs.name }}
            branch-date: ${{ steps.branch.outputs.date }}
            is-new: ${{ steps.branch.outputs.is_new }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}
                  fetch-depth: 0

            - name: Determine branch to use
              id: branch
              run: |
                  if [ -n "${{ inputs.existing_branch }}" ]; then
                    BRANCH_NAME="${{ inputs.existing_branch }}"

                    if ! git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
                      echo "❌ Error: Branch '$BRANCH_NAME' does not exist"
                      exit 1
                    fi

                    echo "Using existing branch: $BRANCH_NAME"
                    echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
                    echo "is_new=false" >> $GITHUB_OUTPUT

                    if [[ "$BRANCH_NAME" =~ rustdoc-updates-([0-9]{14}) ]]; then
                      echo "date=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
                    else
                      echo "date=existing" >> $GITHUB_OUTPUT
                    fi
                  else
                    BRANCH_DATE=$(date +%Y%m%d%H%M%S)
                    BRANCH_NAME="rustdoc-updates-${BRANCH_DATE}-${{ github.run_id }}"

                    RETRY_SUFFIX=""
                    if [ "${{ github.run_attempt }}" -gt 1 ]; then
                      RETRY_SUFFIX="-${{ github.run_attempt }}"
                    fi

                    FULL_BRANCH="${BRANCH_NAME}${RETRY_SUFFIX}"

                    echo "Creating new branch: $FULL_BRANCH"
                    echo "name=$FULL_BRANCH" >> $GITHUB_OUTPUT
                    echo "date=$BRANCH_DATE" >> $GITHUB_OUTPUT
                    echo "is_new=true" >> $GITHUB_OUTPUT
                  fi

            - name: Configure Git
              run: |
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"

            - name: Create new branch
              if: steps.branch.outputs.is_new == 'true'
              run: |
                  git checkout -b ${{ steps.branch.outputs.name }}
                  git push origin ${{ steps.branch.outputs.name }}

            - name: Checkout existing branch
              if: steps.branch.outputs.is_new == 'false'
              run: |
                  git fetch origin ${{ steps.branch.outputs.name }}
                  git checkout ${{ steps.branch.outputs.name }}
                  echo "✅ Checked out existing branch: ${{ steps.branch.outputs.name }}"

    determine-packages:
        name: Determine packages to update
        runs-on: ubuntu-latest
        needs: [create-branch]
        outputs:
            matrix: ${{ steps.analyze.outputs.matrix }}
            has-packages: ${{ steps.analyze.outputs.has-changes }}
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - uses: dtolnay/rust-toolchain@stable

            - name: Generate package matrix
              id: analyze
              uses: ./.github/actions/clippier
              with:
                  command: packages
                  packages: ${{ github.event.inputs.packages }}
                  skip-on-no-changes: "false"
                  force-full-matrix-condition: "true"
                  os-suffix: "-latest"
                  os: "ubuntu"

    update-rustdocs:
        name: Update ${{ matrix.package.name }}
        runs-on: ubuntu-latest
        needs: [create-branch, determine-packages]
        if: needs.determine-packages.outputs.has-packages == 'true'
        strategy:
            fail-fast: false
            max-parallel: 20
            matrix:
                package: ${{ fromJson(needs.determine-packages.outputs.matrix) }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.create-branch.outputs.branch-name }}
                  fetch-depth: 0
                  token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}

            - name: Configure Git
              run: |
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"

            - name: Setup Rust toolchain
              uses: dtolnay/rust-toolchain@stable

            - name: Check if package has library source
              id: check_lib
              run: |
                  if [ -f "${{ matrix.package.path }}/src/lib.rs" ]; then
                    echo "exists=true" >> $GITHUB_OUTPUT
                  else
                    echo "exists=false" >> $GITHUB_OUTPUT
                    echo "No lib.rs found for ${{ matrix.package.name }}, skipping"
                  fi

            - name: Update rustdoc with Claude
              if: steps.check_lib.outputs.exists == 'true'
              uses: anthropics/claude-code-action@v1
              with:
                  claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
                  github_token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}

                  prompt: |
                      ${{
                        (inputs.existing_branch != '' && inputs.prompt_override != '' &&
                          format('# Additional Rustdoc Refinement for {0}

                      This is a refinement pass on an existing rustdoc update branch.

                      ## Previous Context
                      The rustdoc for package `{1}` has already been reviewed and potentially updated.

                      ## Additional Guidance
                      {2}

                      ## Requirements
                      - Review the current state of the rustdoc comments
                      - Apply the additional guidance above
                      - Only make changes that align with the new guidance
                      - Preserve previous improvements unless they conflict with new guidance

                      Focus on incremental improvements based on the additional guidance.',
                          matrix.package.name, matrix.package.path, inputs.prompt_override))
                        ||
                        (inputs.prompt_override != '' && inputs.prompt_override)
                        ||
                        (vars.RUSTDOC_UPDATE_PROMPT != '' && vars.RUSTDOC_UPDATE_PROMPT)
                        ||
                        format('# Rustdoc Accuracy Review for {0}

                      ## ⚠️ CRITICAL CONSTRAINT: FUNDAMENTAL ISSUES ONLY

                      You may ONLY make changes for these reasons:

                      **Fundamentally Missing Documentation:**
                      - Public API items (`pub fn`, `pub struct`, `pub enum`, `pub trait`, `pub const`) without doc comments
                      - Missing `# Errors` sections when function returns `Result`
                      - Missing `# Panics` sections when function can panic
                      - Missing `# Safety` sections on `unsafe` functions
                      - Critical parameters or return values not documented

                      **Fundamentally Incorrect Documentation:**
                      - Doc comments claim behavior that doesn''t match the actual code
                      - Function signatures documented don''t match actual implementation
                      - Error conditions documented don''t match actual `Err` returns
                      - Examples in docs that would fail to compile or run
                      - Links to items that don''t exist

                      **FORBIDDEN Changes (even if you think they would be "better"):**
                      - ❌ Rewording existing docs for clarity, style, or tone
                      - ❌ Reorganizing doc structure when already clear
                      - ❌ Expanding descriptions that are already adequate
                      - ❌ Adding more examples when basics are already covered
                      - ❌ Documenting internal/private items (`pub(crate)`, `pub(super)`, or non-`pub`)
                      - ❌ Over-documenting obvious functions (e.g., simple getters)
                      - ❌ Changing doc formatting when already correct
                      - ❌ Adding `# Examples` to trivial functions
                      - ❌ Including specific line numbers in references (e.g., `lib.rs:123`) - line numbers change frequently

                      **Decision Rule:**
                      Before making ANY change, ask yourself:
                      1. "Would a user of this API be MISLED or UNABLE TO USE this function because of this documentation issue?"
                      2. "Is this a PUBLIC item that MUST be documented, currently lacking any docs?"
                      - If both are NO → Leave it alone
                      - If either is YES → Fix it (it''s fundamental)

                      ## 📖 PUBLIC API FOCUS - Do Not Document Internals

                      Rustdoc is for **users of the crate**, not maintainers. Only document the public API.

                      **DO Document:**
                      - ✅ Public functions, structs, traits, enums, constants (items with `pub` visibility)
                      - ✅ Public struct fields and enum variants
                      - ✅ Function parameters and return values
                      - ✅ Error conditions (with `# Errors` section using asterisk bullet points)
                      - ✅ Panic conditions (with `# Panics` section)
                      - ✅ Safety requirements (with `# Safety` section for `unsafe`)
                      - ✅ Examples for complex functions (but don''t overdo it)

                      **DO NOT Document:**
                      - ❌ Internal items (`pub(crate)`, `pub(super)`, or non-pub items)
                      - ❌ Private fields or methods
                      - ❌ Implementation details (how it works internally)
                      - ❌ Test utilities or `#[cfg(test)]` code
                      - ❌ Helper functions only used within the crate
                      - ❌ Macros not part of the public API

                      **How to identify public items:**
                      1. Item must have `pub` without qualifiers (not `pub(crate)` or `pub(super)`)
                      2. Item must be exported in `lib.rs` or module root (via `pub use` or `pub mod`)
                      3. Parent module must also be public

                      **Special Notes from AGENTS.md:**
                      - Use asterisks (*) for bullet points in doc comments, not dashes
                      - Add `#[must_use]` attribute to constructors and getters (this is code, not just doc)
                      - Document ALL error conditions in `# Errors` sections
                      - Use proper markdown formatting in doc comments

                      ## Verification Process

                      1. **Check Git History First**
                         - Before making ANY change to doc comments, run `git blame` on the specific file
                         - Check `git log` for the file/function you want to modify
                         - Look for commit messages that explain why docs were written a certain way
                         - If docs were recently added/updated with clear rationale, be extra cautious

                      2. **Identify Public APIs**
                         - Read `{1}/src/lib.rs` to see what''s publicly exported
                         - Check `pub use` statements and `pub mod` declarations
                         - Only consider items with plain `pub` visibility (not `pub(crate)`)

                      3. **Check Documentation Against Code**
                         - Read the actual function implementations in `{1}/src/`
                         - Verify documented behavior matches actual code
                         - Check if documented errors match actual `Err` returns
                         - Ensure documented panics match actual `panic!` calls

                      4. **Run Verification Commands**
                         - After making changes, run `cargo fmt` to format
                         - Run `cargo clippy --package {0} --all-targets -- -D warnings` to check for issues
                         - Run `cargo doc --package {0} --no-deps` to verify docs build correctly
                         - These MUST pass before committing

                      ## Scope

                      - Modify source files in `{1}/src/` to add/fix doc comments
                      - Focus on `lib.rs` first, then module files as needed
                      - Only modify `.rs` files, not Cargo.toml or other config

                      ## Output

                      - If public APIs are fundamentally well-documented: **Make NO changes**
                      - If you find fundamental doc issues: Fix them with minimal edits
                      - Do not "improve" docs that are already adequate
                      - After changes, MUST run verification commands before considering work complete',
                          matrix.package.name, matrix.package.path)
                      }}

                  claude_args: |
                      --allowedTools Edit,Read,Write,Bash
                      ${{ inputs.model && format('--model {0}', inputs.model) || vars.RUSTDOC_CLAUDE_MODEL && format('--model {0}', vars.RUSTDOC_CLAUDE_MODEL) || '' }}
                      ${{ inputs.max_tokens && format('--max-tokens {0}', inputs.max_tokens) || vars.RUSTDOC_MAX_TOKENS && format('--max-tokens {0}', vars.RUSTDOC_MAX_TOKENS) || '' }}
                      ${{ inputs.max_turns && format('--max-turns {0}', inputs.max_turns) || vars.RUSTDOC_MAX_TURNS && format('--max-turns {0}', vars.RUSTDOC_MAX_TURNS) || '' }}

            - name: Upload Claude output for review
              if: always() && steps.check_lib.outputs.exists == 'true'
              uses: actions/upload-artifact@v4
              with:
                  name: claude-output-${{ matrix.package.name }}
                  path: output.txt
                  if-no-files-found: ignore
                  retention-days: 7

            - name: Commit changes with resilient push
              if: steps.check_lib.outputs.exists == 'true'
              run: |
                  # Check if any Rust files in the package were modified (staged or unstaged)
                  if git diff --name-only | grep -q "^${{ matrix.package.path }}/.*\.rs$" || \
                     git diff --cached --name-only | grep -q "^${{ matrix.package.path }}/.*\.rs$"; then

                    echo "📝 Rust file changes detected in package, committing..."
                    git add ${{ matrix.package.path }}
                    git commit -m "docs(${{ matrix.package.name }}): improve rustdoc for public APIs"

                    MAX_RETRIES=5
                    RETRY_COUNT=0
                    PUSH_SUCCESS=false

                    while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$PUSH_SUCCESS" = "false" ]; do
                      echo "Push attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"

                      if git pull --rebase origin ${{ needs.create-branch.outputs.branch-name }}; then
                        if git push origin ${{ needs.create-branch.outputs.branch-name }}; then
                          echo "✅ Successfully pushed changes"
                          PUSH_SUCCESS=true
                        else
                          echo "⚠️ Push failed, will retry..."
                          RETRY_COUNT=$((RETRY_COUNT + 1))
                          sleep $((RETRY_COUNT * 2))
                        fi
                      else
                        echo "⚠️ Rebase failed, resolving and retrying..."
                        git rebase --abort || true
                        git fetch origin ${{ needs.create-branch.outputs.branch-name }}
                        RETRY_COUNT=$((RETRY_COUNT + 1))
                        sleep $((RETRY_COUNT * 2))
                      fi
                    done

                    if [ "$PUSH_SUCCESS" = "false" ]; then
                      echo "❌ Failed to push after $MAX_RETRIES attempts"
                      exit 1
                    fi
                  else
                    echo "ℹ️ No changes to Rust files in package, skipping commit"
                    echo "📋 Git status shows:"
                    git status --short
                  fi

    create-pr:
        name: Create Pull Request
        runs-on: ubuntu-latest
        needs: [create-branch, update-rustdocs]
        if: always() && needs.create-branch.result == 'success'

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.create-branch.outputs.branch-name }}
                  token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}
                  fetch-depth: 0

            - name: Check for changes
              id: check_changes
              run: |
                  CHANGES=$(git diff origin/master --name-only | grep -E "\.rs$" || true)
                  if [ -n "$CHANGES" ]; then
                    echo "has_changes=true" >> $GITHUB_OUTPUT
                    echo "Found changes in:"
                    echo "$CHANGES"
                  else
                    echo "has_changes=false" >> $GITHUB_OUTPUT
                    echo "No Rust file changes detected"
                  fi

            - name: Create Pull Request
              if: steps.check_changes.outputs.has_changes == 'true'
              env:
                  GH_TOKEN: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}
              run: |
                  EXISTING_PR=$(gh pr list --head ${{ needs.create-branch.outputs.branch-name }} --json number --jq '.[0].number' || echo "")

                  PR_BODY=$(cat <<'EOF'
                  ## 🤖 Automated Rustdoc Accuracy Review

                  ${{ needs.create-branch.outputs.is-new == 'false' && '### 🔄 This is a refinement pass on an existing branch' || '' }}

                  This PR contains automated updates to ensure all public API rustdoc is accurate and complete.

                  ### 📋 What was reviewed:
                  ${{ inputs.packages != '' && format('- Specific packages: {0}', inputs.packages) || '- ✅ All packages with library sources' }}

                  ${{ inputs.prompt_override != '' && format('### 🎯 Additional Guidance Applied:\n```\n{0}\n```\n', inputs.prompt_override) || '' }}

                  ${{ inputs.model != '' && format('### 🤖 Model Used:\n`{0}`\n', inputs.model) || '' }}

                  ### 🔍 Review focus:
                  - Added missing doc comments to public APIs
                  - Added/fixed `# Errors`, `# Panics`, and `# Safety` sections
                  - Verified documented behavior matches actual code
                  - Ensured examples in docs compile
                  - Fixed broken doc links

                  ### ⚙️ Process:
                  - Used parallel job execution (one per package)
                  - Each package rustdoc reviewed independently by Claude
                  - All changes verified with `cargo clippy` and `cargo doc`
                  - All changes consolidated on branch: `${{ needs.create-branch.outputs.branch-name }}`
                  ${{ needs.create-branch.outputs.is-new == 'false' && '- **Refinement mode**: Building on previous updates' || '' }}

                  ### 📝 Review Guidelines:
                  1. **Verify Accuracy**: Check that docs correctly reflect the code
                  2. **Public API Only**: Ensure no internal items were documented
                  3. **Completeness**: Confirm `# Errors` and `# Panics` sections are accurate
                  4. **Consistency**: Verify doc style follows project conventions

                  ### ⚠️ Important Notes:
                  - This is an automated review - human oversight is essential
                  - Claude focuses on public API documentation only
                  - All changes passed `cargo clippy` and `cargo doc` verification
                  - Please review all changes carefully before merging

                  ---

                  **Generated by**: [Claude Code Action](https://github.com/marketplace/actions/claude-code-action-official)
                  **Branch**: `${{ needs.create-branch.outputs.branch-name }}`
                  **Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
                  ${{ needs.create-branch.outputs.is-new == 'false' && '**Refinement of**: Previous updates on this branch' || '**Initial run**: New branch created' }}
                  EOF
                  )

                  if [ -n "$EXISTING_PR" ]; then
                    echo "✅ PR #$EXISTING_PR already exists, updating it"
                    gh pr edit $EXISTING_PR --body "$PR_BODY"
                    echo "pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
                    echo "pr_url=$(gh pr view $EXISTING_PR --json url --jq '.url')" >> $GITHUB_OUTPUT
                  else
                    echo "📝 Creating new PR"
                    PR_URL=$(gh pr create \
                      --base master \
                      --head ${{ needs.create-branch.outputs.branch-name }} \
                      --title '📚 Automated Rustdoc Accuracy Updates (${{ needs.create-branch.outputs.branch-date }})' \
                      --label documentation,automated,rustdoc-updates \
                      --body "$PR_BODY")

                    echo "✅ Created PR: $PR_URL"
                    echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT

                    PR_NUMBER=$(echo "$PR_URL" | grep -oP '\d+$')
                    echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
                  fi

            - name: No changes summary
              if: steps.check_changes.outputs.has_changes == 'false'
              run: |
                  echo "✅ No rustdoc updates needed - all public API documentation appears accurate"
