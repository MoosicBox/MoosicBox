name: README Accuracy Checker

on:
    schedule:
        - cron: "0 8 * * 1"
    workflow_dispatch:
        inputs:
            existing_branch:
                description: "Use existing branch (leave empty to create new)"
                required: false
                type: string
                default: ""

            packages:
                description: "Comma-separated packages (leave empty for all)"
                required: false
                type: string
                default: ""

            prompt_override:
                description: "Additional guidance or custom prompt"
                required: false
                type: string
                default: ""

            model:
                description: "Claude model to use (leave empty for latest default)"
                required: false
                type: choice
                options:
                    - ""
                    - "claude-sonnet-4-5-20250929"
                    - "claude-opus-4-1-20250805"
                    - "claude-opus-4-20250514"
                    - "claude-sonnet-4-20250514"
                    - "claude-3-7-sonnet-20250219"
                    - "claude-3-5-haiku-20241022"
                    - "claude-3-haiku-20240307"
                default: ""

            max_tokens:
                description: "Maximum tokens per request (leave empty for default)"
                required: false
                type: string
                default: ""

            max_turns:
                description: "Maximum conversation turns (leave empty for default)"
                required: false
                type: string
                default: ""

env:
    CARGO_TERM_COLOR: always

jobs:
    create-branch:
        name: Create or use existing branch
        runs-on: ubuntu-latest
        outputs:
            branch-name: ${{ steps.branch.outputs.name }}
            branch-date: ${{ steps.branch.outputs.date }}
            is-new: ${{ steps.branch.outputs.is_new }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}
                  fetch-depth: 0

            - name: Determine branch to use
              id: branch
              run: |
                  if [ -n "${{ inputs.existing_branch }}" ]; then
                    BRANCH_NAME="${{ inputs.existing_branch }}"

                    if ! git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
                      echo "❌ Error: Branch '$BRANCH_NAME' does not exist"
                      exit 1
                    fi

                    echo "Using existing branch: $BRANCH_NAME"
                    echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
                    echo "is_new=false" >> $GITHUB_OUTPUT

                    if [[ "$BRANCH_NAME" =~ readme-updates-([0-9]{14}) ]]; then
                      echo "date=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
                    else
                      echo "date=existing" >> $GITHUB_OUTPUT
                    fi
                  else
                    BRANCH_DATE=$(date +%Y%m%d%H%M%S)
                    BRANCH_NAME="readme-updates-${BRANCH_DATE}-${{ github.run_id }}"

                    RETRY_SUFFIX=""
                    if [ "${{ github.run_attempt }}" -gt 1 ]; then
                      RETRY_SUFFIX="-${{ github.run_attempt }}"
                    fi

                    FULL_BRANCH="${BRANCH_NAME}${RETRY_SUFFIX}"

                    echo "Creating new branch: $FULL_BRANCH"
                    echo "name=$FULL_BRANCH" >> $GITHUB_OUTPUT
                    echo "date=$BRANCH_DATE" >> $GITHUB_OUTPUT
                    echo "is_new=true" >> $GITHUB_OUTPUT
                  fi

            - name: Configure Git
              run: |
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"

            - name: Create new branch
              if: steps.branch.outputs.is_new == 'true'
              run: |
                  git checkout -b ${{ steps.branch.outputs.name }}
                  git push origin ${{ steps.branch.outputs.name }}

            - name: Checkout existing branch
              if: steps.branch.outputs.is_new == 'false'
              run: |
                  git fetch origin ${{ steps.branch.outputs.name }}
                  git checkout ${{ steps.branch.outputs.name }}
                  echo "✅ Checked out existing branch: ${{ steps.branch.outputs.name }}"

    determine-packages:
        name: Determine packages to update
        runs-on: ubuntu-latest
        needs: [create-branch]
        outputs:
            matrix: ${{ steps.analyze.outputs.matrix }}
            has-packages: ${{ steps.analyze.outputs.has-changes }}
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - uses: dtolnay/rust-toolchain@stable

            - name: Generate package matrix
              id: analyze
              uses: ./.github/actions/clippier
              with:
                  command: packages
                  packages: ${{ github.event.inputs.packages }}
                  skip-on-no-changes: "false"
                  force-full-matrix-condition: "true"
                  os-suffix: "-latest"
                  os: "ubuntu"

    update-readmes:
        name: Update ${{ matrix.package.name }}
        runs-on: ubuntu-latest
        needs: [create-branch, determine-packages]
        if: needs.determine-packages.outputs.has-packages == 'true'
        strategy:
            fail-fast: false
            max-parallel: 20
            matrix:
                package: ${{ fromJson(needs.determine-packages.outputs.matrix) }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.create-branch.outputs.branch-name }}
                  fetch-depth: 0
                  token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}

            - name: Configure Git
              run: |
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"

            - name: Check if README exists
              id: check_readme
              run: |
                  if [ -f "${{ matrix.package.path }}/README.md" ]; then
                    echo "exists=true" >> $GITHUB_OUTPUT
                  else
                    echo "exists=false" >> $GITHUB_OUTPUT
                    echo "No README found for ${{ matrix.package.name }}, skipping"
                  fi

            - name: Update README with Claude
              if: steps.check_readme.outputs.exists == 'true'
              uses: anthropics/claude-code-action@v1
              with:
                  claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
                  github_token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}

                  prompt: |
                      ${{
                        (inputs.existing_branch != '' && inputs.prompt_override != '' &&
                          format('# Additional README Refinement for {0}

                      This is a refinement pass on an existing README update branch.

                      ## Previous Context
                      The README at `{1}/README.md` has already been reviewed and potentially updated.

                      ## Additional Guidance
                      {2}

                      ## Requirements
                      - Review the current state of the README
                      - Apply the additional guidance above
                      - Only make changes that align with the new guidance
                      - Preserve previous improvements unless they conflict with new guidance

                      Focus on incremental improvements based on the additional guidance.',
                          matrix.package.name, matrix.package.path, inputs.prompt_override))
                        ||
                        (inputs.prompt_override != '' && inputs.prompt_override)
                        ||
                        (vars.README_UPDATE_PROMPT != '' && vars.README_UPDATE_PROMPT)
                        ||
                        format('# README Accuracy Review for {0}

                      ## ⚠️ CRITICAL CONSTRAINT: FUNDAMENTAL ERRORS ONLY

                      You may ONLY make changes for these reasons:

                      **Fundamentally Incorrect:**
                      - README claims a feature that doesn''t exist in the code at `{1}/`
                      - Code examples show wrong function signatures (don''t match actual code in `{1}/src/`)
                      - Dependencies listed don''t match `{1}/Cargo.toml`
                      - Module/file references don''t match actual structure
                      - Links are broken or point to wrong locations

                      **Fundamentally Incomplete:**
                      - A major implemented feature is completely missing from README
                      - Critical usage information is absent (e.g., how to use the main API)

                      **FORBIDDEN Changes (even if you think they would be "better"):**
                      - ❌ Rewording for clarity, style, or tone
                      - ❌ Reorganizing sections or structure
                      - ❌ Formatting/markdown improvements
                      - ❌ Adding more examples when basics are already covered
                      - ❌ Expanding descriptions that are already accurate
                      - ❌ Minor completeness improvements
                      - ❌ Changing future tense to present or vice versa (if already marked correctly)
                      - ❌ Removing features that are configured/enabled even if not fully implemented
                      - ❌ Nitpicking wording differences when the meaning is substantially the same
                      - ❌ Including specific line numbers in code references (e.g., `src/file.rs:123`) - line numbers change frequently and should be omitted

                      **Decision Rule:**
                      Before making ANY change, ask yourself:
                      1. "Would a user be MISLED or UNABLE TO USE this package because of this issue?"
                      2. "Am I removing information that is technically accurate based on configuration/capabilities?"
                      - If either is NO → Leave it alone
                      - If both are YES → Fix it (it''s fundamental)

                      **Examples of FORBIDDEN changes:**
                      - Changing "System notifications, tray integration, and OS-specific features" to just "System notification support" (removing configured capabilities)
                      - Changing "Media keys, notifications, and system tray" to "Media keys and notifications" (removing tray mention when capability exists)
                      - Simplifying feature lists that accurately describe configured functionality

                      ## 📖 PUBLIC API FOCUS - Do Not Document Internals

                      READMEs are for **users of the package**, not maintainers. Only document the public-facing API.

                      **DO Document:**
                      - ✅ Public functions, structs, traits (items with `pub` visibility)
                      - ✅ Cargo features users can enable (e.g., `--features async`)
                      - ✅ Main entry points and usage patterns
                      - ✅ Public configuration options
                      - ✅ Integration examples for users

                      **DO NOT Document:**
                      - ❌ Internal macros (`macro_rules!` not in public API)
                      - ❌ Private or crate-private items (`pub(crate)`, `pub(super)`, or non-pub items)
                      - ❌ Implementation details (caches, thread pools, internal state)
                      - ❌ Test utilities or `#[cfg(test)]` code
                      - ❌ Build scripts or internal feature implementations
                      - ❌ Helper functions only used within the crate

                      **How to identify internal items when reviewing code:**
                      1. Check visibility: `pub` without qualifiers = Public ✅ | `pub(crate)` or no `pub` = Internal ❌
                      2. Check if exported in `lib.rs` or module root = Public ✅
                      3. Internal naming patterns (`_helper`, `internal_*`) = Internal ❌
                      4. Only called within same crate = Internal ❌

                      **Decision Rule for Documentation:**
                      When considering whether to document something, ask: "Would a user of this library as a dependency need to know this?"
                      - YES (it''s a public API they''ll call) → Document it
                      - NO (it''s internal implementation) → Leave it out or remove it

                      ## Verification Process

                      1. **Check Git History First**
                         - Before making ANY change to the README, check `git blame` and `git log` for the specific lines/sections you want to modify
                         - Look for commit messages that explain why content was written a certain way
                         - Check if previous commits indicate intentional decisions (e.g., "add X feature to README", "clarify Y behavior")
                         - If the git history shows the content was recently added/updated with a clear rationale, be extra cautious about changing it

                      2. **Check Claims Against Code**
                         - Read the code at `{1}/src/` to verify README claims
                         - Compare API examples with actual function signatures
                         - Check `{1}/Cargo.toml` for dependency accuracy

                      3. **Identify Only Fundamental Issues**
                         - Focus on factual errors and critical omissions
                         - Ignore style, wording, or organizational preferences

                      ## Scope

                      Only modify `{1}/README.md`. Do not change any code files.

                      ## Output

                      - If the README is fundamentally accurate and complete: **Make NO changes**
                      - If you find fundamental errors: Fix them with minimal edits
                      - Do not "improve" things that are already correct',
                          matrix.package.name, matrix.package.path)
                      }}

                  claude_args: |
                      --allowedTools Edit,Read,Write
                      ${{ inputs.model && format('--model {0}', inputs.model) || vars.README_CLAUDE_MODEL && format('--model {0}', vars.README_CLAUDE_MODEL) || '' }}
                      ${{ inputs.max_tokens && format('--max-tokens {0}', inputs.max_tokens) || vars.README_MAX_TOKENS && format('--max-tokens {0}', vars.README_MAX_TOKENS) || '' }}
                      ${{ inputs.max_turns && format('--max-turns {0}', inputs.max_turns) || vars.README_MAX_TURNS && format('--max-turns {0}', vars.README_MAX_TURNS) || '' }}

            - name: Upload Claude output for review
              if: always() && steps.check_readme.outputs.exists == 'true'
              uses: actions/upload-artifact@v4
              with:
                  name: claude-output-${{ matrix.package.name }}
                  path: output.txt
                  if-no-files-found: ignore
                  retention-days: 7

            - name: Format README with prettier
              if: steps.check_readme.outputs.exists == 'true'
              run: |
                  # Check if README was modified by Claude
                  if git diff --name-only | grep -q "${{ matrix.package.path }}/README.md" || \
                     git diff --cached --name-only | grep -q "${{ matrix.package.path }}/README.md"; then

                    echo "📝 README modified, running prettier..."

                    if ! npx -y prettier --write "${{ matrix.package.path }}/README.md"; then
                      echo "⚠️ Prettier failed - continuing with unformatted README"
                      echo "This may indicate malformed markdown in Claude's output"
                    else
                      echo "✅ Prettier formatting complete"
                    fi
                  else
                    echo "ℹ️ No README changes detected, skipping prettier"
                  fi

            - name: Commit changes with resilient push
              if: steps.check_readme.outputs.exists == 'true'
              run: |
                  # Check if README.md specifically was modified (staged or unstaged)
                  if git diff --name-only | grep -q "${{ matrix.package.path }}/README.md" || \
                     git diff --cached --name-only | grep -q "${{ matrix.package.path }}/README.md"; then

                    echo "📝 README changes detected, committing..."
                    git add ${{ matrix.package.path }}/README.md
                    git commit -m "docs(${{ matrix.package.name }}): update README for accuracy"

                    MAX_RETRIES=5
                    RETRY_COUNT=0
                    PUSH_SUCCESS=false

                    while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$PUSH_SUCCESS" = "false" ]; do
                      echo "Push attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"

                      if git pull --rebase origin ${{ needs.create-branch.outputs.branch-name }}; then
                        if git push origin ${{ needs.create-branch.outputs.branch-name }}; then
                          echo "✅ Successfully pushed changes"
                          PUSH_SUCCESS=true
                        else
                          echo "⚠️ Push failed, will retry..."
                          RETRY_COUNT=$((RETRY_COUNT + 1))
                          sleep $((RETRY_COUNT * 2))
                        fi
                      else
                        echo "⚠️ Rebase failed, resolving and retrying..."
                        git rebase --abort || true
                        git fetch origin ${{ needs.create-branch.outputs.branch-name }}
                        RETRY_COUNT=$((RETRY_COUNT + 1))
                        sleep $((RETRY_COUNT * 2))
                      fi
                    done

                    if [ "$PUSH_SUCCESS" = "false" ]; then
                      echo "❌ Failed to push after $MAX_RETRIES attempts"
                      exit 1
                    fi
                  else
                    echo "ℹ️ No changes to README.md, skipping commit"
                    echo "📋 Git status shows:"
                    git status --short
                  fi

    update-root-readme:
        name: Update root README
        runs-on: ubuntu-latest
        needs: [create-branch]

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.create-branch.outputs.branch-name }}
                  fetch-depth: 0
                  token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}

            - name: Configure Git
              run: |
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"

            - name: Update root README with Claude
              uses: anthropics/claude-code-action@v1
              with:
                  claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
                  github_token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}

                  prompt: |
                      ${{
                        (inputs.existing_branch != '' && inputs.prompt_override != '' &&
                          format('# Additional Root README Refinement

                      This is a refinement pass on an existing README update branch.

                      ## Previous Context
                      The root README.md has already been reviewed and potentially updated.

                      ## Additional Guidance
                      {0}

                      ## Requirements
                      - Review the current state of the README
                      - Apply the additional guidance above
                      - Only make changes that align with the new guidance
                      - Preserve previous improvements unless they conflict with new guidance

                      Focus on incremental improvements based on the additional guidance.',
                          inputs.prompt_override))
                        ||
                        (inputs.prompt_override != '' && inputs.prompt_override)
                        ||
                        (vars.ROOT_README_UPDATE_PROMPT != '' && vars.ROOT_README_UPDATE_PROMPT)
                        ||
                        '# Root README Accuracy Review

                      ## ⚠️ CRITICAL CONSTRAINT: FUNDAMENTAL ERRORS ONLY

                      You may ONLY make changes for these reasons:

                      **Fundamentally Incorrect:**
                      - README claims a major feature that doesn''t exist in the codebase
                      - Installation/setup instructions that are completely wrong
                      - Technology/platform claims that are false
                      - Command examples that don''t work
                      - Broken links to documentation or resources

                      **Fundamentally Incomplete:**
                      - Major implemented features completely missing from README
                      - Critical setup steps absent
                      - Essential prerequisites not mentioned

                      **FORBIDDEN Changes (even if you think they would be "better"):**
                      - ❌ Rewording for clarity, style, or tone
                      - ❌ Reorganizing sections
                      - ❌ Marketing copy improvements
                      - ❌ Adding more detail when basics are covered
                      - ❌ Formatting/markdown changes
                      - ❌ Expanding package descriptions that are already accurate
                      - ❌ Minor completeness improvements
                      - ❌ Removing features that are configured/enabled even if not fully implemented
                      - ❌ Nitpicking wording differences when the meaning is substantially the same
                      - ❌ Including specific line numbers in code references (e.g., `src/file.rs:123`) - line numbers change frequently and should be omitted

                      **Decision Rule:**
                      Before making ANY change, ask:
                      1. "Would someone reading this be fundamentally MISLED about what this project does or how to use it?"
                      2. "Am I removing information that is technically accurate based on configuration/capabilities?"
                      - If either is NO → Leave it alone
                      - If both are YES → Fix it (it''s fundamental)

                      **Examples of FORBIDDEN changes:**
                      - Changing "System notifications, tray integration, and OS-specific features" to just "System notification support" (removing configured capabilities)
                      - Changing "Media keys, notifications, and system tray" to "Media keys and notifications" (removing tray mention when capability exists)
                      - Simplifying feature lists that accurately describe configured functionality

                      ## 📖 USER-FACING FOCUS - Don''t Document Implementation Details

                      The root README is for **users and potential contributors**, not deep implementation details.

                      **DO Document:**
                      - ✅ What the project does (high-level purpose)
                      - ✅ How to install and run it
                      - ✅ Major features users will interact with
                      - ✅ Public APIs and user-facing interfaces
                      - ✅ Configuration options for deployment
                      - ✅ Getting started guide

                      **DO NOT Document:**
                      - ❌ Internal architecture implementation details
                      - ❌ Development tooling specifics (save for DEVELOPMENT.md)
                      - ❌ Internal macros or helper utilities
                      - ❌ Build system internals
                      - ❌ Implementation-specific optimizations (caches, thread pools, etc.)
                      - ❌ Internal module organization (unless relevant to users)

                      **Decision Rule for Documentation:**
                      Ask: "Does a user evaluating or using MoosicBox need to know this?"
                      - YES (helps them understand/use the project) → Document it
                      - NO (only relevant to maintainers/contributors) → Leave it out

                      **Focus on:** What users need to evaluate, install, configure, and use MoosicBox successfully.

                      ## Verification Process

                      1. **Check Git History First**
                         - Before making ANY change, check `git blame` and `git log` for the specific lines/sections you want to modify
                         - Look for commit messages that explain why content was written a certain way
                         - Check if previous commits indicate intentional decisions or fixes
                         - If the git history shows the content was recently updated with clear rationale, be extra cautious about changing it

                      2. **Check Major Claims**
                         - Verify listed features actually exist in the codebase
                         - Test that installation instructions are accurate
                         - Confirm technology stack claims

                      3. **Identify Only Fundamental Issues**
                         - Focus on factual errors and critical omissions
                         - Ignore wording preferences and organizational choices

                      ## Output

                      - If the README is fundamentally accurate and complete: **Make NO changes**
                      - If you find fundamental errors: Fix them with minimal edits
                      - Do not "improve" things that are already correct
                      - Preserve the existing tone and marketing approach'
                      }}

                  claude_args: |
                      --allowedTools Edit,Read,Write
                      ${{ inputs.model && format('--model {0}', inputs.model) || vars.README_CLAUDE_MODEL && format('--model {0}', vars.README_CLAUDE_MODEL) || '' }}
                      ${{ inputs.max_tokens && format('--max-tokens {0}', inputs.max_tokens) || vars.README_MAX_TOKENS && format('--max-tokens {0}', vars.README_MAX_TOKENS) || '' }}
                      ${{ inputs.max_turns && format('--max-turns {0}', inputs.max_turns) || vars.README_MAX_TURNS && format('--max-turns {0}', vars.README_MAX_TURNS) || '' }}

            - name: Upload Claude output for review
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: claude-output-root-readme
                  path: output.txt
                  if-no-files-found: ignore
                  retention-days: 7

            - name: Format README with prettier
              run: |
                  # Check if README was modified by Claude
                  if git diff --name-only | grep -q "^README.md$" || \
                     git diff --cached --name-only | grep -q "^README.md$"; then

                    echo "📝 Root README modified, running prettier..."

                    if ! npx -y prettier --write "README.md"; then
                      echo "⚠️ Prettier failed - continuing with unformatted README"
                      echo "This may indicate malformed markdown in Claude's output"
                    else
                      echo "✅ Prettier formatting complete"
                    fi
                  else
                    echo "ℹ️ No README changes detected, skipping prettier"
                  fi

            - name: Commit changes with resilient push
              run: |
                  # Check if README.md specifically was modified (staged or unstaged)
                  if git diff --name-only | grep -q "^README.md$" || \
                     git diff --cached --name-only | grep -q "^README.md$"; then

                    echo "📝 Root README changes detected, committing..."
                    git add README.md
                    git commit -m "docs(root): update README for accuracy"

                    MAX_RETRIES=5
                    RETRY_COUNT=0
                    PUSH_SUCCESS=false

                    while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$PUSH_SUCCESS" = "false" ]; do
                      echo "Push attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"

                      if git pull --rebase origin ${{ needs.create-branch.outputs.branch-name }}; then
                        if git push origin ${{ needs.create-branch.outputs.branch-name }}; then
                          echo "✅ Successfully pushed changes"
                          PUSH_SUCCESS=true
                        else
                          echo "⚠️ Push failed, will retry..."
                          RETRY_COUNT=$((RETRY_COUNT + 1))
                          sleep $((RETRY_COUNT * 2))
                        fi
                      else
                        echo "⚠️ Rebase failed, resolving and retrying..."
                        git rebase --abort || true
                        git fetch origin ${{ needs.create-branch.outputs.branch-name }}
                        RETRY_COUNT=$((RETRY_COUNT + 1))
                        sleep $((RETRY_COUNT * 2))
                      fi
                    done

                    if [ "$PUSH_SUCCESS" = "false" ]; then
                      echo "❌ Failed to push after $MAX_RETRIES attempts"
                      exit 1
                    fi
                  else
                    echo "ℹ️ No changes to root README.md, skipping commit"
                    echo "📋 Git status shows:"
                    git status --short
                  fi

    create-pr:
        name: Create Pull Request
        runs-on: ubuntu-latest
        needs: [create-branch, update-readmes, update-root-readme]
        if: always() && needs.create-branch.result == 'success'

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ needs.create-branch.outputs.branch-name }}
                  token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}
                  fetch-depth: 0

            - name: Check for changes
              id: check_changes
              run: |
                  CHANGES=$(git diff origin/master --name-only | grep README.md || true)
                  if [ -n "$CHANGES" ]; then
                    echo "has_changes=true" >> $GITHUB_OUTPUT
                    echo "Found changes in:"
                    echo "$CHANGES"
                  else
                    echo "has_changes=false" >> $GITHUB_OUTPUT
                    echo "No README changes detected"
                  fi

            - name: Create Pull Request
              if: steps.check_changes.outputs.has_changes == 'true'
              env:
                  GH_TOKEN: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}
              run: |
                  EXISTING_PR=$(gh pr list --head ${{ needs.create-branch.outputs.branch-name }} --json number --jq '.[0].number' || echo "")

                  PR_BODY=$(cat <<'EOF'
                  ## 🤖 Automated README Accuracy Review

                  ${{ needs.create-branch.outputs.is-new == 'false' && '### 🔄 This is a refinement pass on an existing branch' || '' }}

                  This PR contains automated updates to ensure all README files accurately reflect the current state of the codebase.

                  ### 📋 What was reviewed:
                  ${{ inputs.packages != '' && format('- Specific packages: {0}', inputs.packages) || '- ✅ Root README.md\n- ✅ All package READMEs' }}

                  ${{ inputs.prompt_override != '' && format('### 🎯 Additional Guidance Applied:\n```\n{0}\n```\n', inputs.prompt_override) || '' }}

                  ${{ inputs.model != '' && format('### 🤖 Model Used:\n`{0}`\n', inputs.model) || '' }}

                  ### 🔍 Review focus:
                  - Verified that claimed features are actually implemented
                  - Marked future/planned features clearly
                  - Updated outdated information
                  - Ensured code examples match actual APIs
                  - Checked dependency claims against Cargo.toml files

                  ### ⚙️ Process:
                  - Used parallel job execution (one per package)
                  - Each package README reviewed independently by Claude
                  - All changes consolidated on branch: `${{ needs.create-branch.outputs.branch-name }}`
                  ${{ needs.create-branch.outputs.is-new == 'false' && '- **Refinement mode**: Building on previous updates' || '' }}

                  ### 📝 Review Guidelines:
                  1. **Verify Accuracy**: Check that updates correctly reflect the code
                  2. **Future Features**: Ensure planned features are appropriately marked
                  3. **Completeness**: Confirm no important features were removed incorrectly
                  4. **Tone**: Verify documentation maintains appropriate technical tone

                  ### ⚠️ Important Notes:
                  - This is an automated review - human oversight is essential
                  - Claude may be overly conservative or miss nuances
                  - Please review all changes carefully before merging

                  ---

                  **Generated by**: [Claude Code Action](https://github.com/marketplace/actions/claude-code-action-official)
                  **Branch**: `${{ needs.create-branch.outputs.branch-name }}`
                  **Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
                  ${{ needs.create-branch.outputs.is-new == 'false' && '**Refinement of**: Previous updates on this branch' || '**Initial run**: New branch created' }}
                  EOF
                  )

                  if [ -n "$EXISTING_PR" ]; then
                    echo "✅ PR #$EXISTING_PR already exists, updating it"
                    gh pr edit $EXISTING_PR --body "$PR_BODY"
                    echo "pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
                    echo "pr_url=$(gh pr view $EXISTING_PR --json url --jq '.url')" >> $GITHUB_OUTPUT
                  else
                    echo "📝 Creating new PR"
                    PR_URL=$(gh pr create \
                      --base master \
                      --head ${{ needs.create-branch.outputs.branch-name }} \
                      --title '📝 Automated README Accuracy Updates (${{ needs.create-branch.outputs.branch-date }})' \
                      --label documentation,automated,readme-updates \
                      --body "$PR_BODY")

                    echo "✅ Created PR: $PR_URL"
                    echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT

                    PR_NUMBER=$(echo "$PR_URL" | grep -oP '\d+$')
                    echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
                  fi

            - name: No changes summary
              if: steps.check_changes.outputs.has_changes == 'false'
              run: |
                  echo "✅ No README updates needed - all documentation appears accurate"
