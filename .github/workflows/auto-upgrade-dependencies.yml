name: Auto-upgrade Dependencies

on:
    workflow_dispatch:
    schedule:
        - cron: '0 6 * * *'

env:
    CARGO_TERM_COLOR: always
    AWS_REGION: us-east-1

jobs:
    build-matrix:
        name: Build matrix
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.build-matrix-step.outputs.matrix }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - uses: dtolnay/rust-toolchain@stable

            - name: Build matrix JSON
              id: build-matrix-step
              run: |
                  MATRIX=$(
                      cargo run -p clippier \
                          features \
                          packages/server \
                          --os ubuntu \
                          -o json \
                          --features default \
                          | jq -rc \
                              '[
                                  .[]
                                  | {
                                      "name": (.name | sub("^moosicbox_"; "")),
                                      "path": (.path),
                                      "features": (.features),
                                      "requiredFeatures": (if .requiredFeatures != null then .requiredFeatures | join(",") else null end),
                                      "os": (.os + "-latest"),
                                      "dependencies": (.dependencies),
                                      "toolchains": (.toolchains),
                                      "ciSteps": (.ciSteps),
                                      "ciToolchains": (.ciToolchains),
                                      "env": (if .env != null then .env | gsub("\n";" ") else null end),
                                      "nightly": (.nightly)
                                  }
                                  | del(.. | nulls)
                              ]'
                  )
                  echo "Using matrix (raw):"
                  echo $MATRIX
                  echo "Using matrix:"
                  echo $MATRIX | jq
                  echo 'matrix<<EOF' >> $GITHUB_OUTPUT
                  echo $MATRIX >> $GITHUB_OUTPUT
                  echo 'EOF' >> $GITHUB_OUTPUT

    upgrade:
        runs-on: ${{ matrix.package.os }}

        needs: build-matrix

        strategy:
            fail-fast: false

            matrix:
                package: ${{ fromJson(needs.build-matrix.outputs.matrix) }}

        outputs:
            upgraded: ${{ steps.upgrade.outputs.upgraded == 'true' }}

        steps:
            - uses: actions/checkout@v4
              with:
                  token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}

            - name: Update history
              run: git pull

            - uses: dtolnay/rust-toolchain@stable
              with:
                  toolchain: ${{ matrix.package.nightly && 'nightly' || 'stable' }}
                  components: rustfmt, clippy

            - name: Install cargo-edit
              shell: bash
              run: |
                  cargo install \
                      -f cargo-edit \
                      --git https://github.com/BSteffaniak/cargo-edit \
                      --branch add-skip-git-dependencies

            - name: Upgrade
              id: upgrade
              shell: bash
              run: |
                  cargo upgrade --skip-git-dependencies
                  cargo update
                  if [ -n "$(git status --porcelain)" ]; then
                      echo "Found upgrades"
                      echo "upgraded=true" >> "$GITHUB_OUTPUT"
                  else
                      echo "No upgrades"
                      echo "upgraded=false" >> "$GITHUB_OUTPUT"
                  fi

            - name: Install winget
              if: ${{ steps.upgrade.outputs.upgraded == 'true' && matrix.package.os == 'windows-latest' }}
              uses: BSteffaniak/install-winget@v1

            - name: Install dependencies
              if: ${{ steps.upgrade.outputs.upgraded == 'true' && matrix.package.dependencies }}
              run: ${{ matrix.package.dependencies }}

            - name: Clippy ${{ matrix.package.name }}
              if: ${{ steps.upgrade.outputs.upgraded == 'true' }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }} cargo${{ matrix.package.nightly && ' +nightly' || '' }} clippy ${{ runner.debug && '-vv ' }}--no-default-features --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}"
                          # Trim whitespace
                          command=$(echo "$command" | xargs)
                          echo "RUNNING \`$command\`"
                          if ${{ matrix.package.env }} cargo${{ matrix.package.nightly && ' +nightly' || '' }} clippy \
                              ${{ runner.debug && '-vv' }} \
                              --no-default-features \
                              --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                              >&2 echo "COMMAND: (cd ${{ matrix.package.path }}; $command)";
                              return 1
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Run ${{ matrix.package.name }} tests
              if: ${{ steps.upgrade.outputs.upgraded == 'true' }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }} cargo${{ matrix.package.nightly && ' +nightly' || '' }} test --no-default-features --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}"
                          # Trim whitespace
                          command=$(echo "$command" | xargs)
                          echo "RUNNING \`$command\`"
                          if ${{ matrix.package.env }} cargo${{ matrix.package.nightly && ' +nightly' || '' }} test \
                              ${{ runner.debug && '-vv' }} \
                              --no-default-features \
                              --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                              >&2 echo "COMMAND: (cd ${{ matrix.package.path }}; $command)";
                              return 1
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Format ${{ matrix.package.name }}
              if: ${{ steps.upgrade.outputs.upgraded == 'true' }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; ${{ matrix.package.env }} cargo${{ matrix.package.nightly && ' +nightly' || '' }} ${{ runner.debug && '-vv' }} fmt --all -- --check)

            - name: Install cargo-machete
              if: ${{ steps.upgrade.outputs.upgraded == 'true' }}
              shell: bash
              run: |
                  cargo install cargo-machete

            - name: Validate ${{ matrix.package.name }} dependencies (machete)
              if: ${{ steps.upgrade.outputs.upgraded == 'true' }}
              shell: bash
              run: |
                  ${{ matrix.package.env }} cargo machete --with-metadata ${{ matrix.package.path }}

            - name: Commit
              if: ${{ steps.upgrade.outputs.upgraded == 'true' && success() }}
              shell: bash
              run: |
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"
                  git add .
                  git commit --message "Upgrade Cargo Dependencies"
                  echo "Pushing upgrades"
                  git push origin master

            - name: Commit
              if: ${{ steps.upgrade.outputs.upgraded == 'true' && failure() }}
              shell: bash
              run: |
                  branch="$(date +"auto-upgrade-%Y%m%d%H%M%S")"
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"
                  git checkout -b "$branch"
                  git add .
                  git commit --message "Upgrade Cargo Dependencies"
                  echo "Pushing upgrades"
                  git push origin "$branch"

            - name: Upgrade incompatible
              id: upgrade_incompatible
              if: ${{ success() }}
              shell: bash
              run: |
                  cargo upgrade --skip-git-dependencies --incompatible
                  cargo update
                  if [ -n "$(git status --porcelain)" ]; then
                      echo "Found upgrades"
                      echo "upgraded=true" >> "$GITHUB_OUTPUT"
                  else
                      echo "No upgrades"
                      echo "upgraded=false" >> "$GITHUB_OUTPUT"
                  fi

            - name: Install winget
              if: ${{ steps.upgrade_incompatible.outputs.upgraded == 'true' && steps.upgrade.outputs.upgraded == 'false' && matrix.package.os == 'windows-latest' }}
              uses: BSteffaniak/install-winget@v1

            - name: Install dependencies
              if: ${{ steps.upgrade_incompatible.outputs.upgraded == 'true' && steps.upgrade.outputs.upgraded == 'false' && matrix.package.dependencies }}
              run: ${{ matrix.package.dependencies }}

            - name: Clippy ${{ matrix.package.name }}
              if: ${{ success() && steps.upgrade_incompatible.outputs.upgraded == 'true' }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }} cargo clippy --no-default-features --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}"
                          echo "RUNNING \`$command\`"
                          if ${{ matrix.package.env }} cargo clippy \
                              --no-default-features \
                              --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                              return 1
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Run ${{ matrix.package.name }} tests
              if: ${{ success() && steps.upgrade_incompatible.outputs.upgraded == 'true' }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }} cargo test --no-default-features --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}"
                          echo "RUNNING \`$command\`"
                          if ${{ matrix.package.env }} cargo test \
                              --no-default-features \
                              --features="fail-on-warnings,$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                              return 1
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Format ${{ matrix.package.name }}
              if: ${{ success() && steps.upgrade_incompatible.outputs.upgraded == 'true' }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; ${{ matrix.package.env }} cargo fmt)

            - name: Install cargo-machete
              if: ${{ steps.upgrade_incompatible.outputs.upgraded == 'true' && steps.upgrade.outputs.upgraded == 'false' }}
              shell: bash
              run: |
                  cargo install cargo-machete

            - name: Validate ${{ matrix.package.name }} dependencies (machete)
              if: ${{ success() && steps.upgrade_incompatible.outputs.upgraded == 'true' }}
              shell: bash
              run: |
                  ${{ matrix.package.env }} cargo machete --with-metadata ${{ matrix.package.path }}

            - name: Commit
              if: ${{ steps.upgrade_incompatible.outputs.upgraded == 'true' && success() }}
              shell: bash
              run: |
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"
                  git add .
                  git commit --message "Upgrade Incompatible Cargo Dependencies"
                  echo "Pushing upgrades"
                  git push origin master

            - name: Commit
              if: ${{ steps.upgrade_incompatible.outputs.upgraded == 'true' && failure() }}
              shell: bash
              run: |
                  branch="$(date +"auto-upgrade-incompatible-%Y%m%d%H%M%S")"
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"
                  git checkout -b "$branch"
                  git add .
                  git commit --message "Upgrade Incompatible Cargo Dependencies"
                  echo "Pushing upgrades"
                  git push origin "$branch"
