name: Auto-upgrade Dependencies

on:
    workflow_dispatch:
    schedule:
        - cron: "0 6 * * *"

env:
    CARGO_TERM_COLOR: always

jobs:
    build-cargo-upgrade:
        name: Build cargo-upgrade
        strategy:
            fail-fast: true
            matrix:
                os: ["macos-latest", "ubuntu-latest", "windows-latest"]
        runs-on: ${{ matrix.os }}
        steps:
            - uses: dtolnay/rust-toolchain@stable
            - uses: actions/checkout@v4
            - name: Setup cargo-upgrade
              uses: BSteffaniak/cache-artifact@master
              with:
                  github-token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}
                  repo: https://github.com/BSteffaniak/cargo-edit
                  command: cargo install -f cargo-edit --git https://github.com/BSteffaniak/cargo-edit --branch add-skip-git-dependencies
                  shell: bash
                  output-path: ~/.cargo/bin/cargo-upgrade${{ matrix.os == 'windows-latest' && '.exe' || '' }}
                  artifact-name: cargo-upgrade-${{ matrix.os }}-binary
                  cache-key-prefix: cargo-upgrade
                  make-executable: true
                  verify-command: --help
            - uses: actions/upload-artifact@master
              if: ${{ matrix.os == 'macos-latest' }}
              with:
                  name: cargo-upgrade-macos
                  path: ~/.cargo/bin/cargo-upgrade
            - uses: actions/upload-artifact@master
              if: ${{ matrix.os == 'ubuntu-latest' }}
              with:
                  name: cargo-upgrade-ubuntu
                  path: ~/.cargo/bin/cargo-upgrade
            - uses: actions/upload-artifact@master
              if: ${{ matrix.os == 'windows-latest' }}
              with:
                  name: cargo-upgrade.exe
                  path: ~/.cargo/bin/cargo-upgrade.exe

    build-cargo-machete:
        name: Build cargo-machete
        strategy:
            fail-fast: true
            matrix:
                os: ["macos-latest", "ubuntu-latest", "windows-latest"]
        runs-on: ${{ matrix.os }}
        steps:
            - uses: dtolnay/rust-toolchain@stable
            - uses: actions/checkout@v4
            - name: Setup cargo-machete
              uses: BSteffaniak/cache-artifact@master
              with:
                  github-token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}
                  repo: https://github.com/BSteffaniak/cargo-machete
                  command: cargo install --git https://github.com/BSteffaniak/cargo-machete --branch ignored-dirs cargo-machete
                  shell: bash
                  output-path: ~/.cargo/bin/cargo-machete${{ matrix.os == 'windows-latest' && '.exe' || '' }}
                  artifact-name: cargo-machete-${{ matrix.os }}-binary
                  cache-key-prefix: cargo-machete
                  make-executable: true
                  verify-command: --version
            - uses: actions/upload-artifact@master
              if: ${{ matrix.os == 'macos-latest' }}
              with:
                  name: cargo-machete-macos
                  path: ~/.cargo/bin/cargo-machete
            - uses: actions/upload-artifact@master
              if: ${{ matrix.os == 'ubuntu-latest' }}
              with:
                  name: cargo-machete-ubuntu
                  path: ~/.cargo/bin/cargo-machete
            - uses: actions/upload-artifact@master
              if: ${{ matrix.os == 'windows-latest' }}
              with:
                  name: cargo-machete.exe
                  path: ~/.cargo/bin/cargo-machete.exe

    upgrade-dependencies:
        name: Upgrade dependencies (compatible and incompatible)
        runs-on: ubuntu-latest
        needs: [build-cargo-upgrade]
        outputs:
            compatible-upgraded: ${{ steps.upgrade-compatible.outputs.upgraded }}
            incompatible-upgraded: ${{ steps.upgrade-incompatible.outputs.upgraded }}
            branch-name: ${{ steps.branch.outputs.name }}
            incompatible-branch: ${{ steps.branch.outputs.incompatible }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}
                  fetch-depth: 0

            - name: Setup branch name with retry handling
              id: branch
              run: |
                  BRANCH_DATE=$(date +%Y%m%d%H%M%S)
                  BASE_BRANCH="auto-upgrade-${BRANCH_DATE}-${{ github.run_id }}"

                  # Build retry suffix if not first attempt
                  RETRY_SUFFIX=""
                  if [ "${{ github.run_attempt }}" -gt 1 ]; then
                    RETRY_SUFFIX="-${{ github.run_attempt }}"
                  fi

                  BRANCH_NAME="${BASE_BRANCH}${RETRY_SUFFIX}"
                  INCOMPATIBLE_BRANCH="${BASE_BRANCH}-incompatible${RETRY_SUFFIX}"

                  echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
                  echo "incompatible=$INCOMPATIBLE_BRANCH" >> $GITHUB_OUTPUT

                  echo "Using branch: $BRANCH_NAME"
                  echo "Incompatible branch: $INCOMPATIBLE_BRANCH"

            - uses: dtolnay/rust-toolchain@stable
              with:
                  components: rustfmt, clippy

            - uses: actions/download-artifact@master
              if: ${{ runner.os == 'macOS' }}
              with:
                  name: cargo-upgrade-macos
                  path: ~/.cargo/bin

            - uses: actions/download-artifact@master
              if: ${{ runner.os == 'Linux' }}
              with:
                  name: cargo-upgrade-ubuntu
                  path: ~/.cargo/bin

            - uses: actions/download-artifact@master
              if: ${{ runner.os == 'Windows' }}
              with:
                  name: cargo-upgrade.exe
                  path: ~/.cargo/bin

            - name: Make cargo-upgrade executable
              if: ${{ runner.os == 'macOS' }}
              shell: bash
              run: chmod +x ~/.cargo/bin/cargo-upgrade

            - name: Make cargo-upgrade executable
              if: ${{ runner.os == 'Linux' }}
              shell: bash
              run: chmod +x ~/.cargo/bin/cargo-upgrade

            - name: Make cargo-upgrade executable
              if: ${{ runner.os == 'Windows' }}
              shell: bash
              run: chmod +x ~/.cargo/bin/cargo-upgrade.exe

            - name: Setup git config
              run: |
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"

            - name: Create compatible upgrade branch
              run: |
                  git checkout -b ${{ steps.branch.outputs.name }}

            - name: Upgrade compatible dependencies
              id: upgrade-compatible
              shell: bash
              run: |
                  cargo upgrade --skip-git-dependencies
                  cargo update
                  if [ -n "$(git status --porcelain)" ]; then
                      echo "Found compatible upgrades"
                      git add .
                      git commit --message "Upgrade compatible Cargo dependencies"
                      git push origin ${{ steps.branch.outputs.name }}
                      echo "upgraded=true" >> "$GITHUB_OUTPUT"
                  else
                      echo "No compatible upgrades"
                      echo "upgraded=false" >> "$GITHUB_OUTPUT"
                  fi

            - name: Create incompatible upgrade branch (based on compatible)
              run: |
                  git checkout -b ${{ steps.branch.outputs.incompatible }}

            - name: Upgrade incompatible dependencies
              id: upgrade-incompatible
              shell: bash
              run: |
                  cargo upgrade --skip-git-dependencies --incompatible
                  cargo update
                  if [ -n "$(git status --porcelain)" ]; then
                      echo "Found incompatible upgrades"
                      git add .
                      git commit --message "Upgrade incompatible Cargo dependencies"
                      git push origin ${{ steps.branch.outputs.incompatible }}
                      echo "upgraded=true" >> "$GITHUB_OUTPUT"
                  else
                      echo "No incompatible upgrades"
                      echo "upgraded=false" >> "$GITHUB_OUTPUT"
                  fi

    validate-compatible:
        name: Validate compatible upgrades
        runs-on: ubuntu-latest
        needs: [upgrade-dependencies]
        if: ${{ needs.upgrade-dependencies.outputs.compatible-upgraded == 'true' }}
        outputs:
            matrix: ${{ steps.analyze.outputs.matrix }}
            has-changes: ${{ steps.analyze.outputs.has-changes }}
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Checkout upgrade branch
              run: |
                  git fetch origin ${{ needs.upgrade-dependencies.outputs.branch-name }}
                  git checkout ${{ needs.upgrade-dependencies.outputs.branch-name }}

            - name: Analyze changes
              id: analyze
              uses: ./.github/actions/clippier
              with:
                  command: features
                  workspace-path: .
                  chunked: 15
                  max-parallel: 256
                  spread: true
                  skip-features: fail-on-warnings
                  transform-name-regex: "^(moosicbox|switchy|hyperchad)_"
                  git-strategy: branch-comparison
                  git-compare-branch: master
                  os-suffix: -latest

    test-compatible:
        name: Test compatible upgrades
        runs-on: ${{ matrix.package.os }}
        needs: [upgrade-dependencies, validate-compatible, build-cargo-machete]
        if: ${{ needs.upgrade-dependencies.outputs.compatible-upgraded == 'true' && needs.validate-compatible.outputs.matrix != '[]' }}
        strategy:
            fail-fast: false
            matrix:
                package: ${{ fromJson(needs.validate-compatible.outputs.matrix) }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Checkout upgrade branch
              run: |
                  git fetch origin ${{ needs.upgrade-dependencies.outputs.branch-name }}
                  git checkout ${{ needs.upgrade-dependencies.outputs.branch-name }}

            - name: Setup CI environment
              uses: ./.github/actions/clippier
              with:
                  command: setup
                  package-json: ${{ toJson(matrix.package) }}
                  skip-checkout: "true"

            - name: Clippy ${{ matrix.package.name }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }}${{ matrix.package.env && ' ' || '' }}cargo${{ matrix.package.nightly && ' +nightly' || '' }} clippy ${{ runner.debug && '-vv ' }}--all-targets --no-default-features --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}"
                          command=$(echo "$command" | xargs)
                          echo "RUNNING \`$command\`"
                          if cargo${{ matrix.package.nightly && ' +nightly' || '' }} clippy \
                              ${{ runner.debug && '-vv' }} \
                              --all-targets \
                              --no-default-features \
                              --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                              >&2 echo "COMMAND: (cd ${{ matrix.package.path }}; $command)";
                              return 1
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Run ${{ matrix.package.name }} tests
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }}${{ matrix.package.env && ' ' || '' }}cargo${{ matrix.package.nightly && ' +nightly' || '' }} test --no-default-features --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}"
                          command=$(echo "$command" | xargs)
                          echo "RUNNING \`$command\`"
                          if cargo${{ matrix.package.nightly && ' +nightly' || '' }} test \
                              ${{ runner.debug && '-vv' }} \
                              --no-default-features \
                              --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                              >&2 echo "COMMAND: (cd ${{ matrix.package.path }}; $command)";
                              return 1
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Format ${{ matrix.package.name }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; cargo${{ matrix.package.nightly && ' +nightly' || '' }} ${{ runner.debug && '-vv' }} fmt --all -- --check)

            - uses: actions/download-artifact@master
              if: ${{ matrix.package.os == 'macos-latest' }}
              with:
                  name: cargo-machete-macos
                  path: ~/.cargo/bin

            - uses: actions/download-artifact@master
              if: ${{ matrix.package.os == 'ubuntu-latest' }}
              with:
                  name: cargo-machete-ubuntu
                  path: ~/.cargo/bin

            - uses: actions/download-artifact@master
              if: ${{ matrix.package.os == 'windows-latest' }}
              with:
                  name: cargo-machete.exe
                  path: ~/.cargo/bin

            - name: Make cargo-machete executable
              if: ${{ matrix.package.os == 'macos-latest' }}
              shell: bash
              run: chmod +x ~/.cargo/bin/cargo-machete

            - name: Make cargo-machete executable
              if: ${{ matrix.package.os == 'ubuntu-latest' }}
              shell: bash
              run: chmod +x ~/.cargo/bin/cargo-machete

            - name: Make cargo-machete executable
              if: ${{ matrix.package.os == 'windows-latest' }}
              shell: bash
              run: chmod +x ~/.cargo/bin/cargo-machete.exe

            - name: Validate ${{ matrix.package.name }} dependencies (machete)
              shell: bash
              run: |
                  ~/.cargo/bin/cargo-machete --with-metadata ${{ matrix.package.path }}

    commit-compatible:
        name: Commit compatible upgrades
        runs-on: ubuntu-latest
        needs: [upgrade-dependencies, validate-compatible, test-compatible]
        if: ${{ needs.upgrade-dependencies.outputs.compatible-upgraded == 'true' }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}
                  fetch-depth: 0

            - name: Checkout upgrade branch
              run: |
                  git fetch origin ${{ needs.upgrade-dependencies.outputs.branch-name }}
                  git checkout ${{ needs.upgrade-dependencies.outputs.branch-name }}

            - name: Merge to master if tests passed
              if: ${{ needs.test-compatible.result == 'success' || needs.validate-compatible.outputs.matrix == '[]' }}
              run: |
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"
                  git fetch origin master
                  git rebase origin/master
                  git checkout master
                  git pull origin master
                  git merge --ff-only ${{ needs.upgrade-dependencies.outputs.branch-name }}
                  git push origin master
                  echo "✅ Compatible upgrades merged to master"

            - name: Leave branch if tests failed
              if: ${{ needs.test-compatible.result == 'failure' }}
              run: |
                  echo "❌ Tests failed - leaving branch ${{ needs.upgrade-dependencies.outputs.branch-name }} for manual review"

    validate-incompatible:
        name: Validate incompatible upgrades
        runs-on: ubuntu-latest
        needs: [upgrade-dependencies]
        if: ${{ needs.upgrade-dependencies.outputs.incompatible-upgraded == 'true' }}
        outputs:
            matrix: ${{ steps.analyze.outputs.matrix }}
            has-changes: ${{ steps.analyze.outputs.has-changes }}
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Checkout incompatible upgrade branch
              run: |
                  git fetch origin ${{ needs.upgrade-dependencies.outputs.incompatible-branch }}
                  git checkout ${{ needs.upgrade-dependencies.outputs.incompatible-branch }}

            - name: Analyze changes
              id: analyze
              uses: ./.github/actions/clippier
              with:
                  command: features
                  workspace-path: .
                  chunked: 15
                  max-parallel: 256
                  spread: true
                  skip-features: fail-on-warnings
                  transform-name-regex: "^(moosicbox|switchy|hyperchad)_"
                  git-strategy: branch-comparison
                  git-compare-branch: master
                  os-suffix: -latest

    test-incompatible:
        name: Test incompatible upgrades
        runs-on: ${{ matrix.package.os }}
        needs:
            [upgrade-dependencies, validate-incompatible, build-cargo-machete]
        if: ${{ needs.upgrade-dependencies.outputs.incompatible-upgraded == 'true' && needs.validate-incompatible.outputs.matrix != '[]' }}
        strategy:
            fail-fast: false
            matrix:
                package: ${{ fromJson(needs.validate-incompatible.outputs.matrix) }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Checkout incompatible upgrade branch
              run: |
                  git fetch origin ${{ needs.upgrade-dependencies.outputs.incompatible-branch }}
                  git checkout ${{ needs.upgrade-dependencies.outputs.incompatible-branch }}

            - name: Setup CI environment
              uses: ./.github/actions/clippier
              with:
                  command: setup
                  package-json: ${{ toJson(matrix.package) }}
                  skip-checkout: "true"

            - name: Clippy ${{ matrix.package.name }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }}${{ matrix.package.env && ' ' || '' }}cargo${{ matrix.package.nightly && ' +nightly' || '' }} clippy --all-targets --no-default-features --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}"
                          echo "RUNNING \`$command\`"
                          if cargo${{ matrix.package.nightly && ' +nightly' || '' }} clippy \
                              --all-targets \
                              --no-default-features \
                              --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                              return 1
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Run ${{ matrix.package.name }} tests
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }}${{ matrix.package.env && ' ' || '' }}cargo${{ matrix.package.nightly && ' +nightly' || '' }} test --no-default-features --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}"
                          echo "RUNNING \`$command\`"
                          if cargo${{ matrix.package.nightly && ' +nightly' || '' }} test \
                              --no-default-features \
                              --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                              return 1
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Format ${{ matrix.package.name }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; cargo${{ matrix.package.nightly && ' +nightly' || '' }} fmt)

            - uses: actions/download-artifact@master
              if: ${{ matrix.package.os == 'macos-latest' }}
              with:
                  name: cargo-machete-macos
                  path: ~/.cargo/bin

            - uses: actions/download-artifact@master
              if: ${{ matrix.package.os == 'ubuntu-latest' }}
              with:
                  name: cargo-machete-ubuntu
                  path: ~/.cargo/bin

            - uses: actions/download-artifact@master
              if: ${{ matrix.package.os == 'windows-latest' }}
              with:
                  name: cargo-machete.exe
                  path: ~/.cargo/bin

            - name: Make cargo-machete executable
              if: ${{ matrix.package.os == 'macos-latest' }}
              shell: bash
              run: chmod +x ~/.cargo/bin/cargo-machete

            - name: Make cargo-machete executable
              if: ${{ matrix.package.os == 'ubuntu-latest' }}
              shell: bash
              run: chmod +x ~/.cargo/bin/cargo-machete

            - name: Make cargo-machete executable
              if: ${{ matrix.package.os == 'windows-latest' }}
              shell: bash
              run: chmod +x ~/.cargo/bin/cargo-machete.exe

            - name: Validate ${{ matrix.package.name }} dependencies (machete)
              shell: bash
              run: |
                  ~/.cargo/bin/cargo-machete --with-metadata ${{ matrix.package.path }}

    commit-incompatible:
        name: Commit incompatible upgrades
        runs-on: ubuntu-latest
        needs: [upgrade-dependencies, validate-incompatible, test-incompatible]
        if: ${{ needs.upgrade-dependencies.outputs.incompatible-upgraded == 'true' }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.MOOSICBOX_BOT_UPGRADES_TOKEN }}
                  fetch-depth: 0

            - name: Checkout incompatible upgrade branch
              run: |
                  git fetch origin ${{ needs.upgrade-dependencies.outputs.incompatible-branch }}
                  git checkout ${{ needs.upgrade-dependencies.outputs.incompatible-branch }}

            - name: Merge to master if tests passed
              if: ${{ needs.test-incompatible.result == 'success' || needs.validate-incompatible.outputs.matrix == '[]' }}
              run: |
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"
                  git fetch origin master
                  git rebase origin/master
                  git checkout master
                  git pull origin master
                  git merge --ff-only ${{ needs.upgrade-dependencies.outputs.incompatible-branch }}
                  git push origin master
                  echo "✅ Incompatible upgrades merged to master"

            - name: Leave branch if tests failed
              if: ${{ needs.test-incompatible.result == 'failure' }}
              run: |
                  echo "❌ Tests failed - leaving branch ${{ needs.upgrade-dependencies.outputs.incompatible-branch }} for manual review"
