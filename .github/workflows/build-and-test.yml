name: Build and Test

on:
    push:
        branches: ['master', 'edge']
        paths:
            - .github/workflows/build-and-test.yml
            - packages/**
            - '**/*.toml'
            - '**/Cargo.lock'
            - '!packages/marketing_site/*.ts'
            - '!packages/marketing_site/*.json'
            - '!packages/marketing_site/pnpm-lock.yaml'
            - '!packages/marketing_site/*.mjs'
            - '!packages/marketing_site/*.js'
            - '!packages/marketing_site/*.md'
            - '!packages/marketing_site/.prettierignore'
            - '!packages/marketing_site/hyperchad/**'
            - '!packages/marketing_site/infra/**'
            - '!packages/hyperchad/renderer/vanilla_js/web/**'
            - '!**/*.nix'
            - '!**/Dockerfile'
            - '!**/*.Dockerfile'
            - '!**/*.dockerignore'
    pull_request:
        branches: ['master', 'edge']
    schedule:
        - cron: '0 7 * * *'
    workflow_dispatch:
        inputs:
            edge:
                description: 'Edge'
                required: false
                default: 'false'
            seed:
                description: 'Random seed for deterministic feature randomization (leave empty for random)'
                required: false
                type: string
            packages:
                description: 'Comma-separated list of packages to build (e.g., "moosicbox_server,moosicbox_tunnel_server,moosicbox_app"). Leave empty to build all packages.'
                required: false
                type: string
                default: ''
env:
    CARGO_TERM_COLOR: always

jobs:
    cargo-deny:
        continue-on-error: true
        runs-on: ubuntu-latest
        needs: [determine-affected-packages]
        if: ${{ needs.determine-affected-packages.outputs.has-changes == 'true' }}

        strategy:
            matrix:
                checks:
                    - bans
                    - sources
                    - licenses

        steps:
            - uses: actions/checkout@v4

            - uses: dtolnay/rust-toolchain@stable

            - name: cargo-deny check ${{ matrix.checks }}
              uses: EmbarkStudios/cargo-deny-action@v2
              with:
                  command: check ${{ matrix.checks }}
                  arguments: --all-features

    determine-affected-packages:
        name: Determine affected packages
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.analyze.outputs.matrix }}
            has-changes: ${{ steps.analyze.outputs.has-changes }}
            has-tauri-changes: ${{ fromJson(steps.analyze.outputs.additional-checks).tauri.affected || false }}
            reasoning: ${{ steps.analyze.outputs.reasoning }}
            tauri-reasoning: ${{ toJson(fromJson(steps.analyze.outputs.additional-checks).tauri) }}
            additional-checks: ${{ steps.analyze.outputs.additional-checks }}
            randomization-seed: ${{ steps.seed.outputs.value }}
            docker-matrix: ${{ steps.analyze.outputs.docker-matrix }}
            has-docker-changes: ${{ steps.analyze.outputs.has-docker-changes }}
            docker-count: ${{ steps.analyze.outputs.docker-count }}
            docker-packages-list: ${{ steps.analyze.outputs.docker-packages-list }}
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - uses: dtolnay/rust-toolchain@stable

            - name: Generate or use provided seed
              id: seed
              run: |
                  if [[ -n "${{ github.event.inputs.seed }}" ]]; then
                      echo "value=${{ github.event.inputs.seed }}" >> $GITHUB_OUTPUT
                  else
                      echo "value=$(date +%s)$RANDOM" >> $GITHUB_OUTPUT
                  fi

            - name: Analyze changes and generate comprehensive matrix
              id: analyze
              uses: ./.github/actions/clippier
              with:
                  command: features
                  workspace-path: .

                  # Basic configuration
                  packages: ${{ github.event.inputs.packages }}
                  chunked: 15
                  max-parallel: 256
                  spread: true
                  randomize: true
                  seed: ${{ steps.seed.outputs.value }}
                  skip-features: fail-on-warnings
                  include-reasoning: true
                  transform-name-regex: '^(moosicbox|switchy|hyperchad)_'
                  git-strategy: workflow-history
                  inject-reasoning: |
                      ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.packages && format('Manual workflow dispatch - selected packages: {0}', github.event.inputs.packages) || '' }}
                      ${{ github.event_name == 'workflow_dispatch' && !github.event.inputs.packages && 'Manual workflow dispatch - all packages included' || '' }}
                      ${{ github.event_name == 'schedule' && 'Scheduled workflow run - all packages included' || '' }}
                  inject-reasoning-condition: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
                  # Force full matrix for manual/scheduled runs
                  force-full-matrix-condition: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}

                  # Tauri summary & status
                  additional-package-checks: |
                      [
                          {
                              "package": "moosicbox_app",
                              "output-key": "tauri",
                              "summary-section": {
                                  "title": "📱 Tauri Release Summary",
                                  "show-reasoning": true,
                                  "show-all-affected": true,
                                  "status-labels": {
                                      "affected": "Will be triggered",
                                      "not-affected": "Will be skipped"
                                  }
                              }
                          }
                      ]

                  # Docker analysis
                  enable-docker-analysis: true
                  docker-packages: |
                      {
                          "moosicbox_server": {"name": "server", "dockerfile": "packages/server/Server.Dockerfile"},
                          "moosicbox_tunnel_server": {"name": "tunnel_server", "dockerfile": "packages/tunnel_server/TunnelServer.Dockerfile"},
                          "moosicbox_load_balancer": {"name": "load_balancer", "dockerfile": "packages/load_balancer/LoadBalancer.Dockerfile"}
                      }
                  docker-name-prefix: 'moosicbox_'
                  generate-summary: true
                  summary-title: '🧠 Smart CI Analysis Summary'
                  summary-event-name: ${{ github.event_name }}
                  summary-ref-name: ${{ github.ref_name }}
                  summary-trigger-input: ${{ github.event.inputs.packages }}
                  summary-show-trigger: true
                  summary-show-jobs-details: true
                  summary-include-seed: true

    build-cargo-machete:
        name: Build cargo-machete

        strategy:
            fail-fast: true

            matrix:
                os: ['macos-latest', 'ubuntu-latest', 'windows-latest']

        runs-on: ${{ matrix.os }}

        steps:
            - uses: dtolnay/rust-toolchain@stable

            - uses: actions/checkout@v4

            - name: Setup cargo-machete
              uses: BSteffaniak/cache-artifact@master
              with:
                  repo: https://github.com/BSteffaniak/cargo-machete
                  command: cargo install --git https://github.com/BSteffaniak/cargo-machete --branch ignored-dirs cargo-machete
                  shell: bash
                  output-path: ~/.cargo/bin/cargo-machete${{ matrix.os == 'windows-latest' && '.exe' || '' }}
                  artifact-name: cargo-machete-${{ matrix.os }}-binary
                  cache-key-prefix: cargo-machete
                  make-executable: true
                  verify-command: --version

            - uses: actions/upload-artifact@master
              if: ${{ matrix.os == 'macos-latest' }}
              with:
                  name: cargo-machete-macos
                  path: ~/.cargo/bin/cargo-machete

            - uses: actions/upload-artifact@master
              if: ${{ matrix.os == 'ubuntu-latest' }}
              with:
                  name: cargo-machete-ubuntu
                  path: ~/.cargo/bin/cargo-machete

            - uses: actions/upload-artifact@master
              if: ${{ matrix.os == 'windows-latest' }}
              with:
                  name: cargo-machete.exe
                  path: ~/.cargo/bin/cargo-machete.exe

    build:
        runs-on: ${{ matrix.package.os }}

        needs: [determine-affected-packages, build-cargo-machete]

        if: ${{ needs.determine-affected-packages.outputs.has-changes == 'true' }}

        strategy:
            fail-fast: false

            matrix:
                package: ${{ fromJson(needs.determine-affected-packages.outputs.matrix) }}

        steps:
            - name: Print matrix
              shell: bash
              run: echo '${{ toJson(matrix) }}'

            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  submodules: ${{ matrix.package.gitSubmodules == true }}

            - name: Enable patches
              if: ${{ github.event_name == 'schedule' || github.event.inputs.edge == 'true' }}
              run: |
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"
                  git checkout edge
                  git rebase master

            - name: Free disk space
              if: |
                  matrix.package.os == 'ubuntu-latest' && (
                      contains(matrix.package.toolchains, 'free_disk_space') ||
                      contains(matrix.package.ciToolchains, 'free_disk_space')
                  )

              uses: jlumbroso/free-disk-space@main
              with:
                  tool-cache: true

            - name: Setup CI environment
              uses: ./.github/actions/clippier
              with:
                  command: setup
                  package-json: ${{ toJson(matrix.package) }}
                  skip-checkout: 'true'
                  rust-components: 'rustfmt, clippy, llvm-tools-preview'

            - name: Clippy ${{ matrix.package.name }}
              shell: bash
              env:
                  CARGO_LOG: ${{ runner.debug && 'cargo=debug' || '' }}
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }}${{ matrix.package.env && ' ' || '' }}cargo${{ matrix.package.nightly && ' +nightly' || '' }} clippy ${{ runner.debug && '-vv ' }}--all-targets --no-default-features --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}"
                          # Trim whitespace
                          command=$(echo "$command" | xargs)
                          echo "RUNNING \`$command\`"
                          if cargo${{ matrix.package.nightly && ' +nightly' || '' }} clippy \
                              ${{ runner.debug && '-vv' }} \
                              --all-targets \
                              --no-default-features \
                              --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                              >&2 echo "COMMAND: (cd ${{ matrix.package.path }}; $command)";
                              return 1
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: cargo install cargo-llvm-cov
              uses: taiki-e/install-action@cargo-llvm-cov

            - name: Clear target directory
              shell: bash
              run: rm -rf target

            - name: Run ${{ matrix.package.name }} tests
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }}${{ matrix.package.env && ' ' || '' }}cargo${{ matrix.package.nightly && ' +nightly' || '' }} llvm-cov test --no-report --no-default-features --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}"
                          # Trim whitespace
                          command=$(echo "$command" | xargs)
                          echo "RUNNING \`$command\`"
                          if cargo${{ matrix.package.nightly && ' +nightly' || '' }} llvm-cov test --no-report \
                              ${{ runner.debug && '-vv' }} \
                              --no-default-features \
                              --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                              >&2 echo "COMMAND: (cd ${{ matrix.package.path }}; $command)";
                              return 1
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Create coverage report
              id: create_coverage_report
              shell: bash
              run: |
                  (
                      cargo llvm-cov report --lcov --output-path lcov.info 2>&1 || true
                      echo $? > exit_code.txt  # Save exit code before subshell exits
                  ) > coverage_output.txt 2>&1

                  exit_code=$(cat exit_code.txt 2>/dev/null || echo "1")
                  echo "Coverage report command exited with exit code $exit_code"

                  if grep -q "no coverage data found" coverage_output.txt; then
                      echo "No coverage files found"
                      cat coverage_output.txt >&2
                      echo "has_coverage=false" >> $GITHUB_OUTPUT
                  elif [[ $exit_code -eq 1 ]]; then
                      echo "Failed to create coverage"
                      cat coverage_output.txt >&2
                      echo "has_coverage=false" >> $GITHUB_OUTPUT
                      exit $exit_code
                  else
                      echo "Found coverage files"
                      cat coverage_output.txt >&2
                      echo "has_coverage=true" >> $GITHUB_OUTPUT
                  fi

            - name: Clear target directory
              shell: bash
              run: rm -rf target

            - name: Upload coverage reports to Codecov
              if: steps.create_coverage_report.outputs.has_coverage == 'true'
              uses: codecov/codecov-action@v5
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  slug: MoosicBox/MoosicBox
                  flags: ${{ matrix.package.name }}
                  fail_ci_if_error: true

            - name: Format ${{ matrix.package.name }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; cargo${{ matrix.package.nightly && ' +nightly' || '' }} ${{ runner.debug && '-vv' }} fmt --all -- --check)

            - name: Download cargo-machete
              uses: actions/download-artifact@master
              if: ${{ matrix.package.os == 'macos-latest' }}
              with:
                  name: cargo-machete-macos
                  path: ~/.cargo/bin

            - name: Download cargo-machete
              uses: actions/download-artifact@master
              if: ${{ matrix.package.os == 'ubuntu-latest' }}
              with:
                  name: cargo-machete-ubuntu
                  path: ~/.cargo/bin

            - name: Download cargo-machete
              uses: actions/download-artifact@master
              if: ${{ matrix.package.os == 'windows-latest' }}
              with:
                  name: cargo-machete.exe
                  path: ~/.cargo/bin

            - name: Make cargo-machete executable
              if: ${{ matrix.package.os == 'macos-latest' }}
              shell: bash
              run: chmod +x ~/.cargo/bin/cargo-machete

            - name: Make cargo-machete executable
              if: ${{ matrix.package.os == 'ubuntu-latest' }}
              shell: bash
              run: chmod +x ~/.cargo/bin/cargo-machete

            - name: Make cargo-machete executable
              if: ${{ matrix.package.os == 'windows-latest' }}
              shell: bash
              run: chmod +x ~/.cargo/bin/cargo-machete.exe

            - name: Validate ${{ matrix.package.name }} dependencies (machete)
              if: ${{ matrix.package.os == 'macos-latest' }}
              shell: bash
              run: |
                  ~/.cargo/bin/cargo-machete --with-metadata ${{ matrix.package.path }}

            - name: Validate ${{ matrix.package.name }} dependencies (machete)
              if: ${{ matrix.package.os == 'ubuntu-latest' }}
              shell: bash
              run: |
                  ~/.cargo/bin/cargo-machete --with-metadata ${{ matrix.package.path }}

            - name: Validate ${{ matrix.package.name }} dependencies (machete)
              if: ${{ matrix.package.os == 'windows-latest' }}
              shell: bash
              run: |
                  ~/.cargo/bin/cargo-machete.exe --with-metadata ${{ matrix.package.path }}

    build-docker-images:
        runs-on: ubuntu-latest
        needs: [determine-affected-packages]
        if: ${{ needs.determine-affected-packages.outputs.has-docker-changes == 'true' }}
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Enable patches
              if: ${{ github.event_name == 'schedule' || github.event.inputs.edge == 'true' }}
              run: |
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"
                  git checkout edge
                  git rebase master

            - name: Generate Dockerfiles
              run: |
                  echo "🐳 Generating Dockerfiles for affected packages..."
                  echo "Using Docker matrix from determine-affected-packages job"
                  echo "Matrix: ${{ needs.determine-affected-packages.outputs.docker-matrix }}"

    docker-build:
        needs: [determine-affected-packages, build-docker-images]
        if: ${{ needs.determine-affected-packages.outputs.has-docker-changes == 'true' }}
        strategy:
            fail-fast: false
            matrix: ${{ fromJson(needs.determine-affected-packages.outputs.docker-matrix) }}

        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  submodules: ${{ matrix.gitSubmodules == true }}

            - name: Enable patches
              if: ${{ github.event_name == 'schedule' || github.event.inputs.edge == 'true' }}
              run: |
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"
                  git checkout edge
                  git rebase master

            - name: Setup clippier
              uses: BSteffaniak/cache-artifact@master
              with:
                  directory: ./packages/clippier
                  command: cargo build --package clippier --features git-diff --release
                  output-path: ./target/release/clippier
                  artifact-name: clippier-binary
                  cache-key-prefix: moosicbox-clippier
                  make-executable: true
                  verify-command: --version

            - name: Generate Dockerfile
              shell: bash
              run: |
                  ./terraform/scripts/generate-dockerfiles.sh ${{ matrix.name }}

            - name: Build Docker image
              shell: bash
              run: |
                  # Build Docker image with environment variables if they exist
                  if [ -n "${{ matrix.env }}" ]; then
                      echo "🌍 Building with environment variables: ${{ matrix.env }}"
                      # Convert environment variables to Docker build args
                      BUILD_ARGS=""
                      while IFS='=' read -r key value; do
                          if [ -n "$key" ] && [ -n "$value" ]; then
                              BUILD_ARGS="$BUILD_ARGS --build-arg $key=$value"
                          fi
                      done < <(echo "${{ matrix.env }}" | tr ' ' '\n')

                      echo "🐳 Docker build command: docker build $BUILD_ARGS . -f ${{ matrix.dockerfile }}"
                      docker build $BUILD_ARGS . -f ${{ matrix.dockerfile }}
                  else
                      echo "🐳 Building without environment variables"
                      docker build . -f ${{ matrix.dockerfile }}
                  fi

    create-tauri-app-release:
        if: ${{ github.event_name != 'schedule' && !github.event.inputs.edge && needs.determine-affected-packages.outputs.has-tauri-changes == true }}

        runs-on: ubuntu-latest

        needs: [determine-affected-packages, build]

        steps:
            - uses: actions/checkout@v4
              with:
                  token: ${{ secrets.WORKFLOW_MANAGEMENT_TOKEN }}
                  path: MoosicBox

            - name: Get release hash
              id: release_hash
              run: |
                  HASH="$(git -C MoosicBox rev-parse --verify HEAD | head -c 10)"
                  echo "hash: $HASH"
                  echo "hash=$HASH" >> $GITHUB_OUTPUT

            - name: Check tag exists for SHA
              id: check_exists
              working-directory: MoosicBox
              run: |
                  git fetch --unshallow --tags
                  if [[ -n $(git show-ref --tags -d) ]]; then
                      git show-ref --tags -d

                      if [[ $(git show-ref --tags -d | grep "${{ github.sha }}") =~ "master-${{ steps.release_hash.outputs.hash }}" ]]; then
                          echo "exists=true" >> $GITHUB_OUTPUT
                          echo "exists"
                      else
                          echo "exists=false" >> $GITHUB_OUTPUT
                          echo "does not exist"
                      fi
                  fi

            - uses: BSteffaniak/delete-older-releases@master
              if: ${{ steps.check_exists.outputs.exists != 'true' }}
              with:
                  keep_latest: 2
                  delete_tag_pattern: ^master-[0-9a-f]{10,10}$
                  regex: true
              env:
                  GITHUB_TOKEN: ${{ secrets.WORKFLOW_MANAGEMENT_TOKEN }}

            - name: Create and push tag
              if: ${{ steps.check_exists.outputs.exists != 'true' }}
              working-directory: MoosicBox
              run: |
                  git tag master-${{ steps.release_hash.outputs.hash }}
                  git push origin master-${{ steps.release_hash.outputs.hash }}
