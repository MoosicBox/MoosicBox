name: Build and Test

on:
    push:
        branches: ['master', 'edge']
        paths:
            - packages/**
            - '**/*.toml'
            - '**/Cargo.lock'
            - .github/workflows/build-and-test.yml
            - free_disk_space.sh
            - '!packages/marketing_site/*.ts'
            - '!packages/marketing_site/*.json'
            - '!packages/marketing_site/pnpm-lock.yaml'
            - '!packages/marketing_site/*.mjs'
            - '!packages/marketing_site/*.js'
            - '!packages/marketing_site/*.md'
            - '!packages/marketing_site/.prettierignore'
            - '!packages/marketing_site/hyperchad/**'
            - '!packages/marketing_site/infra/**'
            - '!packages/hyperchad/renderer/vanilla_js/web/**'
            - '!**/*.nix'
            - '!**/Dockerfile'
            - '!**/*.Dockerfile'
            - '!**/*.dockerignore'
    pull_request:
        branches: ['master', 'edge']
    schedule:
        - cron: '0 7 * * *'
    workflow_dispatch:
        inputs:
            edge:
                description: 'Edge'
                required: false
                default: 'false'
env:
    CARGO_TERM_COLOR: always

jobs:
    cargo-deny:
        continue-on-error: true
        runs-on: ubuntu-latest

        strategy:
            matrix:
                checks:
                    - bans
                    - sources
                    - licenses

        steps:
            - uses: actions/checkout@v4

            - uses: dtolnay/rust-toolchain@stable

            - name: cargo-deny check ${{ matrix.checks }}
              uses: EmbarkStudios/cargo-deny-action@v2
              with:
                  command: check ${{ matrix.checks }}
                  arguments: --all-features

    coverage:
        continue-on-error: true
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - uses: dtolnay/rust-toolchain@stable
              with:
                  toolchain: nightly
                  components: rustfmt,llvm-tools-preview

            - name: cargo install cargo-llvm-cov
              uses: taiki-e/install-action@cargo-llvm-cov

            - name: Get dependencies
              id: dependencies
              run: |
                  DEPENDENCIES="$(cargo run -p clippier dependencies . --os ubuntu)"
                  echo "Using dependencies:"
                  echo "$DEPENDENCIES"
                  echo 'dependencies<<EOF' >> $GITHUB_OUTPUT
                  echo "$DEPENDENCIES" >> $GITHUB_OUTPUT
                  echo 'EOF' >> $GITHUB_OUTPUT

            - name: Get environment
              id: environment
              run: |
                  ENVIRONMENT="$(cargo run -p clippier environment . --os ubuntu -o json | jq -cr 'join(" ")')"
                  echo "Using environment:"
                  echo "$ENVIRONMENT"
                  echo 'environment<<EOF' >> $GITHUB_OUTPUT
                  echo "$ENVIRONMENT" >> $GITHUB_OUTPUT
                  echo 'EOF' >> $GITHUB_OUTPUT

            - name: Get ci_steps
              id: ci_steps
              run: |
                  CI_STEPS="$(cargo run -p clippier ci-steps . --os ubuntu -o json | jq -cr 'join(" ")')"
                  echo "Using ci_steps:"
                  echo "$CI_STEPS"
                  echo 'ci_steps<<EOF' >> $GITHUB_OUTPUT
                  echo "$CI_STEPS" >> $GITHUB_OUTPUT
                  echo 'EOF' >> $GITHUB_OUTPUT

            - name: Setup cmake
              uses: jwlawson/actions-setup-cmake@v2
              with:
                  cmake-version: '3.x'

            - name: Setup CI
              if: ${{ steps.ci_steps.outputs.ci_steps }}
              run: ${{ steps.ci_steps.outputs.ci_steps }}

            - name: Install dependencies
              if: ${{ steps.dependencies.outputs.dependencies }}
              shell: bash
              run: ${{ steps.dependencies.outputs.dependencies }}

            - name: cargo llvm-cov
              run: ${{ steps.environment.outputs.environment }} cargo +nightly llvm-cov --locked --workspace --lcov --output-path lcov.info

            - name: Upload coverage reports to Codecov
              uses: codecov/codecov-action@v5
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  slug: MoosicBox/MoosicBox
                  fail_ci_if_error: true

    build-matrix:
        name: Build matrix

        strategy:
            fail-fast: true

            matrix:
                os: ['macos-latest', 'ubuntu-latest', 'windows-latest']

        runs-on: ${{ matrix.os }}

        outputs:
            matrix: ${{ steps.build-matrix-step.outputs.matrix }}

        steps:
            - uses: dtolnay/rust-toolchain@stable

            - name: Checkout
              if: ${{ matrix.os == 'ubuntu-latest' }}
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Build matrix JSON
              if: ${{ matrix.os == 'ubuntu-latest' }}
              id: build-matrix-step
              run: |
                  MATRIX=$(
                      cargo run -p clippier \
                          features \
                          . \
                          --chunked 5 \
                          --max-parallel 256 \
                          -o json \
                          --spread \
                          | jq -rc \
                              '[
                                  .[]
                                  | {
                                      "name": (.name | sub("^moosicbox_"; "")),
                                      "path": (.path),
                                      "features": (.features),
                                      "requiredFeatures": (if .requiredFeatures != null then .requiredFeatures | join(",") else null end),
                                      "os": (.os + "-latest"),
                                      "dependencies": (.dependencies),
                                      "toolchains": (.toolchains),
                                      "ciSteps": (.ciSteps),
                                      "ciToolchains": (.ciToolchains),
                                      "env": (.env)
                                  }
                                  | del(.. | nulls)
                              ]'
                  )
                  echo "Using matrix (raw):"
                  echo $MATRIX
                  echo "Using matrix:"
                  echo $MATRIX | jq
                  echo 'matrix<<EOF' >> $GITHUB_OUTPUT
                  echo $MATRIX >> $GITHUB_OUTPUT
                  echo 'EOF' >> $GITHUB_OUTPUT

            - name: Install cargo-machete
              shell: bash
              run: |
                  cargo install cargo-machete

            - uses: actions/upload-artifact@master
              if: ${{ matrix.os == 'macos-latest' }}
              with:
                  name: cargo-machete-macos
                  path: ~/.cargo/bin/cargo-machete

            - uses: actions/upload-artifact@master
              if: ${{ matrix.os == 'ubuntu-latest' }}
              with:
                  name: cargo-machete-ubuntu
                  path: ~/.cargo/bin/cargo-machete

            - uses: actions/upload-artifact@master
              if: ${{ matrix.os == 'windows-latest' }}
              with:
                  name: cargo-machete.exe
                  path: ~/.cargo/bin/cargo-machete.exe

    build:
        runs-on: ${{ matrix.package.os }}

        needs: build-matrix

        strategy:
            fail-fast: false

            matrix:
                package: ${{ fromJson(needs.build-matrix.outputs.matrix) }}

        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Enable patches
              if: ${{ github.event_name == 'schedule' || github.event.inputs.edge == 'true' }}
              run: |
                  git config user.name "MoosicBoxBot"
                  git config user.email "MoosicBoxBot@gmail.com"
                  git checkout edge
                  git rebase master

            - uses: dtolnay/rust-toolchain@stable

            - name: Install winget
              if: ${{ matrix.package.os == 'windows-latest' && contains(matrix.package.dependencies, 'winget') }}
              uses: BSteffaniak/install-winget@v1

            - name: Setup CI
              if: ${{ matrix.package.ciSteps }}
              run: ${{ matrix.package.ciSteps }}

            - uses: pnpm/action-setup@v3
              if: ${{ contains(matrix.package.toolchains, 'pnpm') || contains(matrix.package.ciToolchains, 'pnpm') }}
              name: Install pnpm
              with:
                  version: latest
                  run_install: false

            - uses: actions/setup-node@v4
              if: ${{ contains(matrix.package.toolchains, 'node') || contains(matrix.package.ciToolchains, 'node') }}
              name: Install node
              with:
                  node-version: latest

            - name: Setup cmake
              uses: jwlawson/actions-setup-cmake@v2
              with:
                  cmake-version: '3.x'

            - name: Install dependencies
              if: ${{ matrix.package.dependencies }}
              shell: bash
              run: ${{ matrix.package.dependencies }}

            - name: Clippy ${{ matrix.package.name }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }} cargo clippy ${{ runner.debug && '-vv ' }}--no-default-features --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}"
                          # Trim whitespace
                          command=$(echo "$command" | xargs)
                          echo "RUNNING \`$command\`"
                          if ${{ matrix.package.env }} cargo clippy \
                              ${{ runner.debug && '-vv' }} \
                              --no-default-features \
                              --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                              >&2 echo "COMMAND: (cd ${{ matrix.package.path }}; $command)";
                              return 1
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Run ${{ matrix.package.name }} tests
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; \
                      while read -r feature; do \
                          command="${{ matrix.package.env }} cargo test --no-default-features --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}"
                          # Trim whitespace
                          command=$(echo "$command" | xargs)
                          echo "RUNNING \`$command\`"
                          if ${{ matrix.package.env }} cargo test \
                              ${{ runner.debug && '-vv' }} \
                              --no-default-features \
                              --features="fail-on-warnings${{ matrix.package.requiredFeatures && format(',{0}', matrix.package.requiredFeatures) || '' }},$feature" ${{ matrix.package.cargo }}; then
                              echo "SUCCESS \`$command\`";
                          else
                              >&2 echo "FAILED \`$command\`";
                              >&2 echo "COMMAND: (cd ${{ matrix.package.path }}; $command)";
                              return 1
                          fi
                      done <<<"$(echo '${{ toJson(matrix.package.features) }}' | jq -r '.[]')")

            - name: Format ${{ matrix.package.name }}
              shell: bash
              run: |
                  (cd ${{ matrix.package.path }}; ${{ matrix.package.env }} cargo ${{ runner.debug && '-vv' }} fmt --all -- --check)

            - uses: actions/download-artifact@master
              if: ${{ matrix.package.os == 'macos-latest' }}
              with:
                  name: cargo-machete-macos
                  path: ~/.cargo/bin

            - uses: actions/download-artifact@master
              if: ${{ matrix.package.os == 'ubuntu-latest' }}
              with:
                  name: cargo-machete-ubuntu
                  path: ~/.cargo/bin

            - uses: actions/download-artifact@master
              if: ${{ matrix.package.os == 'windows-latest' }}
              with:
                  name: cargo-machete.exe
                  path: ~/.cargo/bin

            - name: Make cargo-machete executable
              if: ${{ matrix.package.os == 'macos-latest' }}
              shell: bash
              run: chmod +x ~/.cargo/bin/cargo-machete

            - name: Make cargo-machete executable
              if: ${{ matrix.package.os == 'ubuntu-latest' }}
              shell: bash
              run: chmod +x ~/.cargo/bin/cargo-machete

            - name: Make cargo-machete executable
              if: ${{ matrix.package.os == 'windows-latest' }}
              shell: bash
              run: chmod +x ~/.cargo/bin/cargo-machete.exe

            - name: Validate ${{ matrix.package.name }} dependencies (machete)
              if: ${{ matrix.package.os == 'macos-latest' }}
              shell: bash
              run: |
                  ${{ matrix.package.env }} ~/.cargo/bin/cargo-machete --with-metadata ${{ matrix.package.path }}

            - name: Validate ${{ matrix.package.name }} dependencies (machete)
              if: ${{ matrix.package.os == 'ubuntu-latest' }}
              shell: bash
              run: |
                  ${{ matrix.package.env }} ~/.cargo/bin/cargo-machete --with-metadata ${{ matrix.package.path }}

            - name: Validate ${{ matrix.package.name }} dependencies (machete)
              if: ${{ matrix.package.os == 'windows-latest' }}
              shell: bash
              run: |
                  ${{ matrix.package.env }} ~/.cargo/bin/cargo-machete.exe --with-metadata ${{ matrix.package.path }}

    create-tauri-app-release:
        if: ${{ github.event_name != 'schedule' && !github.event.inputs.edge }}

        runs-on: ubuntu-latest

        needs: build

        steps:
            - uses: actions/checkout@v4
              with:
                  token: ${{ secrets.WORKFLOW_MANAGEMENT_TOKEN }}
                  path: MoosicBox

            - name: Get release hash
              id: release_hash
              run: |
                  HASH="$(git -C MoosicBox rev-parse --verify HEAD | head -c 10)"
                  echo "hash: $HASH"
                  echo "hash=$HASH" >> $GITHUB_OUTPUT

            - name: Check tag exists for SHA
              id: check_exists
              working-directory: MoosicBox
              run: |
                  git fetch --unshallow --tags
                  if [[ -n $(git show-ref --tags -d) ]]; then
                      git show-ref --tags -d

                      if [[ $(git show-ref --tags -d | grep "${{ github.sha }}") =~ "master-${{ steps.release_hash.outputs.hash }}" ]]; then
                          echo "exists=true" >> $GITHUB_OUTPUT
                          echo "exists"
                      else
                          echo "exists=false" >> $GITHUB_OUTPUT
                          echo "does not exist"
                      fi
                  fi

            - uses: BSteffaniak/delete-older-releases@master
              if: ${{ steps.check_exists.outputs.exists != 'true' }}
              with:
                  keep_latest: 2
                  delete_tag_pattern: ^master-[0-9a-f]{10,10}$
                  regex: true
              env:
                  GITHUB_TOKEN: ${{ secrets.WORKFLOW_MANAGEMENT_TOKEN }}

            - name: Create and push tag
              if: ${{ steps.check_exists.outputs.exists != 'true' }}
              working-directory: MoosicBox
              run: |
                  git tag master-${{ steps.release_hash.outputs.hash }}
                  git push origin master-${{ steps.release_hash.outputs.hash }}
