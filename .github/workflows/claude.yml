name: Claude Code

on:
    issue_comment:
        types: [created]
    pull_request_review_comment:
        types: [created]
    issues:
        types: [opened, assigned]
    pull_request_review:
        types: [submitted]

concurrency:
    group: claude-${{ github.event.issue.number || github.event.pull_request.number || github.run_id }}
    cancel-in-progress: false

jobs:
    claude:
        if: |
            (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
            (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
            (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
            (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
            issues: write
            id-token: write
            actions: read # Required for Claude to read CI results on PRs
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.ref || github.ref }}
                  repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}
                  fetch-depth: 0

            - name: Get PR details for issue comments
              id: pr_details
              if: github.event_name == 'issue_comment' && github.event.issue.pull_request
              run: |
                  echo "Fetching PR details for issue comment..."
                  PR_DATA=$(gh api "/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}")
                  HEAD_REF=$(echo "$PR_DATA" | jq -r '.head.ref')
                  HEAD_REPO=$(echo "$PR_DATA" | jq -r '.head.repo.full_name')
                  HEAD_SHA=$(echo "$PR_DATA" | jq -r '.head.sha')

                  echo "PR Branch: $HEAD_REF"
                  echo "PR Repo: $HEAD_REPO"
                  echo "PR SHA: $HEAD_SHA"

                  echo "head_ref=$HEAD_REF" >> $GITHUB_OUTPUT
                  echo "head_repo=$HEAD_REPO" >> $GITHUB_OUTPUT
                  echo "head_sha=$HEAD_SHA" >> $GITHUB_OUTPUT
              env:
                  GH_TOKEN: ${{ github.token }}

            - name: Checkout PR branch for issue comments
              if: github.event_name == 'issue_comment' && github.event.issue.pull_request
              run: |
                  echo "Checking out PR branch: ${{ steps.pr_details.outputs.head_ref }}"
                  git fetch origin ${{ steps.pr_details.outputs.head_ref }}
                  git checkout ${{ steps.pr_details.outputs.head_ref }}
                  echo "Current branch: $(git branch --show-current)"
                  echo "Current commit: $(git rev-parse HEAD)"

            - name: Get comment thread context
              id: thread_context
              if: github.event_name == 'pull_request_review_comment'
              run: |
                  CURRENT_ID="${{ github.event.comment.id }}"
                  PR_NUMBER="${{ github.event.pull_request.number }}"

                  echo "Finding root comment for comment $CURRENT_ID"

                  # Step 1: Walk backwards to find the root comment
                  # GitHub PR review comments have a flat structure - all replies point to the root
                  ROOT_ID=""
                  TEMP_ID="$CURRENT_ID"

                  while [ "$TEMP_ID" != "null" ] && [ -n "$TEMP_ID" ]; do
                    echo "Checking comment $TEMP_ID..."

                    if ! COMMENT=$(gh api "/repos/${{ github.repository }}/pulls/comments/$TEMP_ID" 2>/dev/null); then
                      echo "Warning: Could not fetch comment $TEMP_ID"
                      break
                    fi

                    PARENT_ID=$(echo "$COMMENT" | jq -r '.in_reply_to_id // "null"')
                    echo "  in_reply_to_id: $PARENT_ID"

                    if [ "$PARENT_ID" = "null" ] || [ -z "$PARENT_ID" ]; then
                      # This is the root comment
                      ROOT_ID="$TEMP_ID"
                      echo "Found root comment: $ROOT_ID"
                      break
                    fi

                    TEMP_ID="$PARENT_ID"
                  done

                  if [ -z "$ROOT_ID" ]; then
                    echo "Error: Could not find root comment"
                    exit 1
                  fi

                  # Step 2: Fetch ALL comments on this PR (with pagination)
                  echo "Fetching all comments on PR #$PR_NUMBER..."
                  ALL_COMMENTS=$(gh api "/repos/${{ github.repository }}/pulls/$PR_NUMBER/comments" --paginate)

                  # Step 3: Filter for root + all replies to root, sorted by created_at
                  echo "Building thread history for root comment $ROOT_ID..."
                  THREAD_HISTORY=$(echo "$ALL_COMMENTS" | jq --arg root_id "$ROOT_ID" '
                    [.[] | select((.id | tostring) == $root_id or (.in_reply_to_id | tostring) == $root_id)]
                    | sort_by(.created_at)
                  ')

                  echo "Full Thread History $(echo "THREAD_HISTORY" | jq)"

                  # Save full thread history
                  echo "$THREAD_HISTORY" > /tmp/thread_history.json
                  THREAD_COUNT=$(echo "$THREAD_HISTORY" | jq 'length')
                  echo "Thread history ($THREAD_COUNT comments):"
                  echo "$THREAD_HISTORY" | jq -r '.[] | "  - [\(.user.login) at \(.created_at)]: \(.body | split("\n")[0] | .[0:80])..."'

                  # Extract context from the root comment (first in thread)
                  ROOT_COMMENT=$(echo "$THREAD_HISTORY" | jq '.[0]')
                  PATH_VALUE=$(echo "$ROOT_COMMENT" | jq -r '.path')
                  LINE_VALUE=$(echo "$ROOT_COMMENT" | jq -r 'if .line != null then .line else .original_line end')
                  SIDE_VALUE=$(echo "$ROOT_COMMENT" | jq -r '.side // "unknown"')
                  DIFF_HUNK=$(echo "$ROOT_COMMENT" | jq -r '.diff_hunk')

                  # Output simple values
                  echo "path=$PATH_VALUE" >> $GITHUB_OUTPUT
                  echo "line=$LINE_VALUE" >> $GITHUB_OUTPUT
                  echo "side=$SIDE_VALUE" >> $GITHUB_OUTPUT
                  echo "root_comment_id=$ROOT_ID" >> $GITHUB_OUTPUT

                  # Output multi-line diff_hunk using heredoc syntax
                  echo "diff_hunk<<EOF" >> $GITHUB_OUTPUT
                  echo "$DIFF_HUNK" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

                  # Format thread history for Claude (exclude the latest comment since it's passed separately)
                  if [ "$THREAD_COUNT" -gt 1 ]; then
                    echo "thread_history<<EOF" >> $GITHUB_OUTPUT
                    echo "$THREAD_HISTORY" | jq -r '.[0:-1] | .[] | "[@\(.user.login) at \(.created_at)]:\n\(.body)\n"' >> $GITHUB_OUTPUT
                    echo "EOF" >> $GITHUB_OUTPUT
                  else
                    # No previous history, just the current comment
                    echo "thread_history=" >> $GITHUB_OUTPUT
                  fi
              env:
                  GH_TOKEN: ${{ github.token }}

            - name: Run Claude Code
              id: claude
              uses: anthropics/claude-code-action@v1
              with:
                  claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

                  # This is an optional setting that allows Claude to read CI results on PRs
                  additional_permissions: |
                      actions: read

                  # Grant access to file editing tools and all bash commands
                  claude_args: '--allowedTools "Edit,Read,Write,Bash"'

                  prompt: |
                      You are helping with a GitHub repository. A user has mentioned @claude in a comment.

                      IMPORTANT: You MUST post TWO comments:
                      1. FIRST - An acknowledgment that you're working on it
                      2. SECOND - Your actual response/findings

                      Context:
                      - REPO: ${{ github.repository }}
                      - PR/ISSUE NUMBER: ${{ github.event.issue.number || github.event.pull_request.number }}
                      - BRANCH: ${{ steps.pr_details.outputs.head_ref || github.event.pull_request.head.ref || github.ref_name }}
                      - Comment Type: ${{ github.event_name }}
                      ${{ github.event_name == 'pull_request_review_comment' && format('

                      SPECIFIC CODE CONTEXT (this is what the user is asking about):
                      - File: {0}
                      - Line: {1} (on the {2} side of the diff)
                      - Code snippet:
                      ```
                      {3}
                      ```
                      ', steps.thread_context.outputs.path, steps.thread_context.outputs.line, steps.thread_context.outputs.side, steps.thread_context.outputs.diff_hunk) || '' }}
                      ${{ github.event_name == 'pull_request_review_comment' && steps.thread_context.outputs.thread_history != '' && format('

                      THREAD HISTORY (previous discussion on this code):
                      {0}
                      ', steps.thread_context.outputs.thread_history) || '' }}
                      - User's latest message: "${{ github.event.comment.body || github.event.review.body || github.event.issue.body }}"

                      STEP 1 - POST ACKNOWLEDGMENT:
                      Before doing anything else, immediately post a comment saying you're looking into it.
                      Use the appropriate command based on the comment type:
                      ${{ github.event_name == 'pull_request_review_comment' && format('
                      - Reply to the comment thread using the ROOT comment ID (this ensures proper threading):
                        `gh api -X POST "/repos/{0}/pulls/{1}/comments/{2}/replies" -f body="👀 Looking into this...\n\n[View workflow run](https://github.com/{0}/actions/runs/{3})" 2>&1 || echo "Failed to post acknowledgment"`
                        IMPORTANT: Use the root comment ID {2} for all replies to ensure they appear in the correct thread.
                      ', github.repository, github.event.pull_request.number, steps.thread_context.outputs.root_comment_id, github.run_id) || github.event_name == 'issue_comment' && github.event.issue.pull_request && format('
                      - Post a PR comment:
                        `gh pr comment {0} --repo {1} --body "👀 Looking into this...\n\n[View workflow run](https://github.com/{1}/actions/runs/{2})"`
                      ', github.event.issue.number, github.repository, github.run_id) || format('
                      - Post an issue comment:
                        `gh issue comment {0} --repo {1} --body "👀 Looking into this...\n\n[View workflow run](https://github.com/{1}/actions/runs/{2})"`
                      ', github.event.issue.number, github.repository, github.run_id) }}

                      STEP 2 - ANALYZE THE SPECIFIC CONTEXT:

                      CRITICAL: Focus on the SPECIFIC CODE CONTEXT provided above, not the entire PR.
                      ${{ github.event_name == 'pull_request_review_comment' && '- The user is asking about THAT SPECIFIC code snippet shown above
                      - Look at the file path, line number, and diff hunk provided
                      - Do not analyze the entire PR unless specifically asked
                      - Stay focused on the code in the immediate context' || '- Focus on the specific question or request
                      - Do not over-analyze unless asked for comprehensive review' }}

                      GUIDELINES:

                      1. **Questions vs Commands**: Carefully read the tone and structure of the user's message.
                         - If it's phrased as a QUESTION (contains "?", "how", "why", "what", "can you explain", etc.):
                           → Analyze the SPECIFIC code context provided (if applicable)
                           → Explain what that specific code does
                           → DO NOT make code changes or commits
                           → DO NOT create branches or PRs

                         - If it's phrased as a COMMAND/STATEMENT (imperative, declarative, "please fix", "update X", etc.):
                           → Implement changes to the SPECIFIC code mentioned
                           → Create commits with descriptive messages
                           → **ALWAYS push commits to the remote repository with `git push`**
                           → Create branches/PRs if needed

                      2. **When in doubt**: Ask for clarification before taking action.

                      3. **Keep responses focused and concise**:
                         - Answer about the specific code/context provided
                         - Reference the file and line number when relevant
                         - Don't be overly detailed unless specifically asked

                      STEP 3 - POST FINAL RESPONSE:
                      After completing your analysis or implementation, post a final comment with your findings.
                      Reference the specific code context in your response if applicable.

                      Use the appropriate command based on the comment type:
                      ${{ github.event_name == 'pull_request_review_comment' && format('
                      - Reply to the comment thread using the ROOT comment ID:
                        `gh api -X POST "/repos/{0}/pulls/{1}/comments/{2}/replies" -f body="your detailed response" 2>&1 || echo "Failed to post response"`

                        IMPORTANT: Use the root comment ID {2} for all replies.
                      ', github.repository, github.event.pull_request.number, steps.thread_context.outputs.root_comment_id) || github.event_name == 'issue_comment' && github.event.issue.pull_request && format('
                      - Post a PR comment:
                        `gh pr comment {0} --repo {1} --body "your response"`
                      ', github.event.issue.number, github.repository) || format('
                      - Post an issue comment:
                        `gh issue comment {0} --repo {1} --body "your response"`
                      ', github.event.issue.number, github.repository) }}

                      Now respond appropriately based on whether this is a question or a command.
