name: Tauri Prepare MoosicBox App Release

on:
    release:
        types: published

env:
    CARGO_TERM_COLOR: always
    ANDROID_HOME: /home/runner/.android
    ANDROID_SDK_ROOT: /home/runner/.android
    NDK_HOME: /home/runner/.android/ndk/25.0.8775105

jobs:
    package:
        permissions: write-all

        runs-on: ${{ matrix.release.runner || matrix.release.os }}

        strategy:
            fail-fast: false
            matrix:
                release:
                    # - os: ubuntu-latest
                    #   profile: debug
                    #   target: desktop
                    #   tag: debug
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled

                    # - os: ubuntu-latest
                    #   profile: release
                    #   target: all-formats,all-sources,cpal,desktop
                    #   tag: release
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled

                    - os: ubuntu-latest
                      profile: release-lto
                      target: desktop
                      bundled: true
                      features: all-formats,all-sources,cpal,desktop,bundled

                    # - os: ubuntu-latest
                    #   profile: release-lto-no-panic
                    #   target: desktop
                    #   tag: release-lto-no-panic
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,all-formats,all-sources,cpal,desktop,bundled

                    # - os: windows-latest
                    #   profile: debug
                    #   target: desktop
                    #   tag: debug
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled

                    # - os: windows-latest
                    #   profile: release
                    #   target: desktop
                    #   tag: release
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled

                    - os: windows-latest
                      profile: release-lto
                      target: desktop
                      bundled: true
                      features: all-formats,all-sources,cpal,desktop,bundled

                    # - os: windows-latest
                    #   profile: release-lto-no-panic
                    #   target: desktop
                    #   tag: release-lto-no-panic
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled

                    # - os: macos-latest
                    #   profile: debug
                    #   target: desktop
                    #   tag: debug
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled

                    # - os: macos-latest
                    #   profile: release
                    #   target: desktop
                    #   tag: release
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled

                    - os: macos-latest
                      profile: release-lto
                      target: desktop
                      bundled: true
                      features: all-formats,all-sources,cpal,desktop,bundled

                    # - os: macos-latest
                    #   profile: release-lto-no-panic
                    #   target: desktop
                    #   tag: release-lto-no-panic
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled

                    # - os: ubuntu-latest
                    #   profile: debug
                    #   target: desktop
                    #   tag: debug-client
                    #   features: all-formats,all-sources,cpal,desktop,client

                    # - os: ubuntu-latest
                    #   profile: release
                    #   target: desktop
                    #   tag: release-client
                    #   features: all-formats,all-sources,cpal,desktop,client

                    - os: ubuntu-latest
                      profile: release-lto
                      target: desktop
                      tag: client
                      features: all-formats,all-sources,cpal,desktop,client

                    # - os: ubuntu-latest
                    #   profile: release-lto-no-panic
                    #   target: desktop
                    #   tag: release-lto-no-panic-client
                    #   features: all-formats,all-sources,cpal,desktop,client

                    # - os: windows-latest
                    #   profile: debug
                    #   target: desktop
                    #   tag: debug-client
                    #   features: all-formats,all-sources,cpal,desktop,client

                    # - os: windows-latest
                    #   profile: release
                    #   target: desktop
                    #   tag: release-client
                    #   features: all-formats,all-sources,cpal,desktop,client

                    - os: windows-latest
                      profile: release-lto
                      target: desktop
                      tag: client
                      features: all-formats,all-sources,cpal,desktop,client

                    # - os: windows-latest
                    #   profile: release-lto-no-panic
                    #   target: desktop
                    #   tag: release-lto-no-panic-client
                    #   features: all-formats,all-sources,cpal,desktop,client

                    # - os: macos-latest
                    #   profile: debug
                    #   target: desktop
                    #   tag: debug-client
                    #   features: all-formats,all-sources,cpal,desktop,client

                    # - os: macos-latest
                    #   profile: release
                    #   target: desktop
                    #   tag: release-client
                    #   features: all-formats,all-sources,cpal,desktop,client

                    - os: macos-latest
                      profile: release-lto
                      target: desktop
                      tag: client
                      features: all-formats,all-sources,cpal,desktop,client

                    # - os: macos-latest
                    #   profile: release-lto-no-panic
                    #   target: desktop
                    #   tag: release-lto-no-panic-client
                    #   features: all-formats,all-sources,cpal,desktop,client

                    # - os: ubuntu-latest
                    #   profile: debug
                    #   target: android
                    #   tag: debug
                    #   # tag: debug-client
                    #   features: all-formats,all-sources,cpal,android,client

                    - os: ubuntu-latest
                      profile: release
                      target: android
                      tag: client
                      features: all-formats,all-sources,cpal,android,client

                    # - os: ubuntu-latest
                    #   profile: debug
                    #   target: android
                    #   bundled: true
                    #   features: android,bundled

                    - os: ubuntu-latest
                      profile: release
                      target: android
                      bundled: true
                      features: all-formats,all-sources,cpal,android,bundled

                    # - os: ubuntu-latest
                    #   profile: debug
                    #   target: desktop
                    #   tag: hyperchad-debug
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled
                    #   config: tauri.hyperchad.conf.json

                    # - os: ubuntu-latest
                    #   profile: release
                    #   target: desktop
                    #   tag: hyperchad-release
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled
                    #   config: tauri.hyperchad.conf.json

                    - os: ubuntu-latest
                      profile: release-lto
                      target: desktop
                      tag: hyperchad
                      bundled: true
                      features: all-formats,all-sources,cpal,desktop,bundled
                      config: tauri.hyperchad.conf.json

                    # - os: ubuntu-latest
                    #   profile: release-lto-no-panic
                    #   target: desktop
                    #   tag: hyperchad-release-lto-no-panic
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled
                    #   config: tauri.hyperchad.conf.json

                    # - os: windows-latest
                    #   profile: debug
                    #   target: desktop
                    #   tag: hyperchad-debug
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled
                    #   config: tauri.hyperchad.conf.json

                    # - os: windows-latest
                    #   profile: release
                    #   target: desktop
                    #   tag: hyperchad-release
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled
                    #   config: tauri.hyperchad.conf.json

                    - os: windows-latest
                      profile: release-lto
                      target: desktop
                      tag: hyperchad
                      bundled: true
                      features: all-formats,all-sources,cpal,desktop,bundled
                      config: tauri.hyperchad.conf.json

                    # - os: windows-latest
                    #   profile: release-lto-no-panic
                    #   target: desktop
                    #   tag: hyperchad-release-lto-no-panic
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled
                    #   config: tauri.hyperchad.conf.json

                    # - os: macos-latest
                    #   profile: debug
                    #   target: desktop
                    #   tag: hyperchad-debug
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled
                    #   config: tauri.hyperchad.conf.json

                    # - os: macos-latest
                    #   profile: release
                    #   target: desktop
                    #   tag: hyperchad-release
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled
                    #   config: tauri.hyperchad.conf.json

                    - os: macos-latest
                      profile: release-lto
                      target: desktop
                      tag: hyperchad
                      bundled: true
                      features: all-formats,all-sources,cpal,desktop,bundled
                      config: tauri.hyperchad.conf.json

                    # - os: macos-latest
                    #   profile: release-lto-no-panic
                    #   target: desktop
                    #   tag: hyperchad-release-lto-no-panic
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,desktop,bundled
                    #   config: tauri.hyperchad.conf.json

                    # - os: ubuntu-latest
                    #   profile: debug
                    #   target: desktop
                    #   tag: hyperchad-debug-client
                    #   features: all-formats,all-sources,cpal,desktop,client
                    #   config: tauri.hyperchad.conf.json

                    # - os: ubuntu-latest
                    #   profile: release
                    #   target: desktop
                    #   tag: hyperchad-release-client
                    #   features: all-formats,all-sources,cpal,desktop,client
                    #   config: tauri.hyperchad.conf.json

                    - os: ubuntu-latest
                      profile: release-lto
                      target: desktop
                      tag: hyperchad-client
                      features: all-formats,all-sources,cpal,desktop,client
                      config: tauri.hyperchad.conf.json

                    # - os: ubuntu-latest
                    #   profile: release-lto-no-panic
                    #   target: desktop
                    #   tag: hyperchad-release-lto-no-panic-client
                    #   features: all-formats,all-sources,cpal,desktop,client
                    #   config: tauri.hyperchad.conf.json

                    # - os: windows-latest
                    #   profile: debug
                    #   target: desktop
                    #   tag: hyperchad-debug-client
                    #   features: all-formats,all-sources,cpal,desktop,client
                    #   config: tauri.hyperchad.conf.json

                    # - os: windows-latest
                    #   profile: release
                    #   target: desktop
                    #   tag: hyperchad-release-client
                    #   features: all-formats,all-sources,cpal,desktop,client
                    #   config: tauri.hyperchad.conf.json

                    - os: windows-latest
                      profile: release-lto
                      target: desktop
                      tag: hyperchad-client
                      features: all-formats,all-sources,cpal,desktop,client
                      config: tauri.hyperchad.conf.json

                    # - os: windows-latest
                    #   profile: release-lto-no-panic
                    #   target: desktop
                    #   tag: hyperchad-release-lto-no-panic-client
                    #   features: all-formats,all-sources,cpal,desktop,client
                    #   config: tauri.hyperchad.conf.json

                    # - os: macos-latest
                    #   profile: debug
                    #   target: desktop
                    #   tag: hyperchad-debug-client
                    #   features: all-formats,all-sources,cpal,desktop,client
                    #   config: tauri.hyperchad.conf.json

                    # - os: macos-latest
                    #   profile: release
                    #   target: desktop
                    #   tag: hyperchad-release-client
                    #   features: all-formats,all-sources,cpal,desktop,client
                    #   config: tauri.hyperchad.conf.json

                    - os: macos-latest
                      profile: release-lto
                      target: desktop
                      tag: hyperchad-client
                      features: all-formats,all-sources,cpal,desktop,client
                      config: tauri.hyperchad.conf.json

                    # - os: macos-latest
                    #   profile: release-lto-no-panic
                    #   target: desktop
                    #   tag: hyperchad-release-lto-no-panic-client
                    #   features: all-formats,all-sources,cpal,desktop,client
                    #   config: tauri.hyperchad.conf.json

                    # - os: ubuntu-latest
                    #   profile: debug
                    #   target: android
                    #   tag: hyperchad-debug
                    #   features: all-formats,all-sources,cpal,android,client
                    #   config: tauri.hyperchad.conf.json

                    - os: ubuntu-latest
                      profile: release
                      target: android
                      tag: hyperchad-client
                      features: all-formats,all-sources,cpal,android,client
                      config: tauri.hyperchad.conf.json

                    # - os: ubuntu-latest
                    #   profile: debug
                    #   target: android
                    #   tag: hyperchad
                    #   bundled: true
                    #   features: all-formats,all-sources,cpal,android,bundled
                    #   config: tauri.hyperchad.conf.json

                    - os: ubuntu-latest
                      profile: release
                      target: android
                      tag: hyperchad
                      bundled: true
                      features: all-formats,all-sources,cpal,android,bundled
                      config: tauri.hyperchad.conf.json

        steps:
            - name: Clean self-hosted runner
              if: ${{ matrix.release.runner == 'self-hosted' }}
              run: |
                  rm -rf ${{ github.workspace }}/*

            - name: Checkout audiotags
              uses: actions/checkout@v4
              with:
                  repository: BSteffaniak/audiotags
                  ref: feat/add-full-date-capabilities
                  path: audiotags

            - uses: actions/checkout@v4
              with:
                  path: MoosicBox

            - uses: dtolnay/rust-toolchain@stable

            - name: Get package version
              id: package_version
              working-directory: MoosicBox/packages/app/tauri/src-tauri
              shell: bash
              run: |
                  VERSION="$(cargo metadata --format-version=1 --no-deps | jq --raw-output '.packages[] | select(.name == "moosicbox_app") | .version')"
                  echo "version: $VERSION"
                  echo "version=$VERSION" >> $GITHUB_OUTPUT

            - name: ⚡ Cache cargo
              if: ${{ matrix.release.runner != 'self-hosted' }}
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ matrix.release.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - name: Install Dependencies
              if: ${{ matrix.release.os == 'ubuntu-latest' }}
              run: |
                  sudo apt update
                  sudo apt install libwebkit2gtk-4.1-dev \
                      build-essential \
                      curl \
                      wget \
                      file \
                      libssl-dev \
                      libgtk-3-dev \
                      libayatana-appindicator3-dev \
                      librsvg2-dev \
                      libasound2-dev \
                      libsoup-3.0-dev

            - name: Free disk space
              if: ${{ matrix.release.target == 'android' }}
              working-directory: MoosicBox
              run: |
                  ./free_disk_space.sh

            - name: Install Android Dependencies
              if: ${{ matrix.release.target == 'android' }}
              run: |
                  rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
                  wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
                  unzip commandlinetools-linux-8512546_latest.zip
                  mkdir -p ~/.android/cmdline-tools/latest
                  mv cmdline-tools/* ~/.android/cmdline-tools/latest/
                  yes | ~/.android/cmdline-tools/latest/bin/sdkmanager --licenses
                  ~/.android/cmdline-tools/latest/bin/sdkmanager "platforms;android-33" "platform-tools" "ndk;25.0.8775105" "build-tools;33.0.0"

                  export ANDROID_NDK_HOME=$NDK_HOME

                  echo "ANDROID_NDK_HOME=$HOME/Android/Sdk/ndk/25.0.8775105" >> $GITHUB_ENV

                  export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
                  export TARGET=aarch64-linux-android
                  export API=33

                  echo "TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64" >> $GITHUB_ENV
                  echo "TARGET=aarch64-linux-android" >> $GITHUB_ENV
                  echo "API=33" >> $GITHUB_ENV

                  export AR=$TOOLCHAIN/bin/llvm-ar
                  export CC=$TOOLCHAIN/bin/$TARGET$API-clang
                  export AS=$CC
                  export CXX=$TOOLCHAIN/bin/$TARGET$API-clang++
                  export LD=$TOOLCHAIN/bin/ld
                  export RANLIB=$TOOLCHAIN/bin/llvm-ranlib
                  export STRIP=$TOOLCHAIN/bin/llvm-strip

                  echo "AR=$TOOLCHAIN/bin/llvm-ar" >> $GITHUB_ENV
                  echo "CC=$TOOLCHAIN/bin/$TARGET$API-clang" >> $GITHUB_ENV
                  echo "AS=$CC" >> $GITHUB_ENV
                  echo "CXX=$TOOLCHAIN/bin/$TARGET$API-clang++" >> $GITHUB_ENV
                  echo "LD=$TOOLCHAIN/bin/ld" >> $GITHUB_ENV
                  echo "RANLIB=$TOOLCHAIN/bin/llvm-ranlib" >> $GITHUB_ENV
                  echo "STRIP=$TOOLCHAIN/bin/llvm-strip" >> $GITHUB_ENV

                  export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin
                  export PATH=$PATH:$TOOLCHAIN/bin

            - uses: actions/setup-java@v4
              if: ${{ matrix.release.runner != 'self-hosted' }}
              with:
                  distribution: 'adopt'
                  java-version: '17'

            - name: Copy Files
              working-directory: MoosicBox/packages/app/tauri
              shell: bash
              run: |
                  ./copy-files.sh

            - uses: pnpm/action-setup@v3
              if: ${{ matrix.release.runner != 'self-hosted' }}
              name: Install pnpm
              with:
                  version: latest
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Generate config
              working-directory: MoosicBox/packages/app/tauri
              run: cargo run --package moosicbox_app_create_config -- -o src/config.ts ${{ matrix.release.bundled && ' --bundled' || '' }}

            - name: pnpm install
              working-directory: MoosicBox/packages/app/tauri
              run: pnpm install

            - name: Build Tauri Desktop App
              if: ${{ matrix.release.target == 'desktop' }}
              shell: bash
              working-directory: MoosicBox/packages/app/tauri
              run: |
                  pnpm tauri build ${{ matrix.release.config && format('--config src-tauri/{0}', matrix.release.config) || '' }} \
                      ${{ matrix.release.profile == 'debug' && '--debug' || '-- --profile' }} ${{ matrix.release.profile != 'debug' && matrix.release.profile || '' }} \
                      --no-default-features ${{ matrix.release.features && format('--features {0}', matrix.release.features) || '' }}

            - name: Set up Keystore
              if: ${{ matrix.release.target == 'android' }}
              working-directory: MoosicBox/packages/app/tauri
              run: |
                  echo "${{ secrets.ANDROID_SIGNING_KEY_KEYSTORE }}" | \
                      base64 -di > /home/runner/upload-keystore.jks
                  echo "storePassword=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}" >> src-tauri/gen/android/key.properties
                  echo "keyPassword=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}" >> src-tauri/gen/android/key.properties
                  echo "keyAlias=upload" >> src-tauri/gen/android/key.properties
                  echo "storeFile=/home/runner/upload-keystore.jks" >> src-tauri/gen/android/key.properties

            - name: Build Tauri Android App
              if: ${{ matrix.release.target == 'android' }}
              working-directory: MoosicBox/packages/app/tauri
              run: |
                  export CPATH="$PWD/src-tauri/include:$CPATH"
                  pnpm tauri ${{ matrix.release.target }} build ${{ matrix.release.config && format('--config src-tauri/{0}', matrix.release.config) || '' }}${{ matrix.release.profile == 'debug' && ' --debug' || '' }} ${{ matrix.release.features && format('--features {0}', matrix.release.features) || '' }}

            - name: Make assets directory
              shell: bash
              id: assets_dir
              run: |
                  mkdir assets
                  cd assets
                  echo "path=$(pwd)" >> $GITHUB_OUTPUT

            - name: Add moosicbox_amd64${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.deb Asset
              if: ${{ matrix.release.os == 'ubuntu-latest' && matrix.release.target == 'desktop' }}
              working-directory: MoosicBox/target/${{ matrix.release.profile }}/bundle
              run: |
                  mv deb/MoosicBox_${{ steps.package_version.outputs.version }}_amd64.deb \
                      ${{ steps.assets_dir.outputs.path }}/moosicbox_amd64${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.deb

            - name: Add MoosicBox_linux_amd64${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }} Asset
              if: ${{ matrix.release.os == 'ubuntu-latest' && matrix.release.target == 'desktop' }}
              working-directory: MoosicBox/target/${{ matrix.release.profile }}
              run: |
                  mv moosicbox_app ${{ steps.assets_dir.outputs.path }}/moosicbox_linux_amd64${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}

            - name: Add MoosicBox_amd64${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.AppImage Asset
              if: ${{ matrix.release.os == 'ubuntu-latest' && matrix.release.target == 'desktop' }}
              working-directory: MoosicBox/target/${{ matrix.release.profile }}/bundle
              run: |
                  mv appimage/MoosicBox_${{ steps.package_version.outputs.version }}_amd64.AppImage \
                      ${{ steps.assets_dir.outputs.path }}/moosicbox_amd64${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.AppImage

            - name: Add MoosicBox${{ matrix.release.runner != 'self-hosted' && '_x64' || '' }}_macos${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}_app Asset
              if: ${{ matrix.release.os == 'macos-latest' }}
              shell: bash
              run: |
                  7z \
                      a \
                      -mx=9 \
                      -tzip \
                      ${{ steps.assets_dir.outputs.path }}/MoosicBox${{ matrix.release.runner != 'self-hosted' && '_x64' || '' }}_macos${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}_app.zip \
                      MoosicBox/target/${{ matrix.release.profile }}/bundle/macos/MoosicBox.app

            - name: Add MoosicBox_macos${{ matrix.release.runner != 'self-hosted' && '_x64' || '' }}${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }} Asset
              if: ${{ matrix.release.os == 'macos-latest' }}
              working-directory: MoosicBox/target/${{ matrix.release.profile }}
              run: |
                  mv moosicbox_app ${{ steps.assets_dir.outputs.path }}/MoosicBox_macos${{ matrix.release.runner != 'self-hosted' && '_x64' || '' }}${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}

            - name: Add MoosicBox${{ matrix.release.runner != 'self-hosted' && '_x64' || '' }}${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.dmg Asset
              if: ${{ matrix.release.os == 'macos-latest' }}
              working-directory: MoosicBox/target/${{ matrix.release.profile }}/bundle
              run: |
                  mv dmg/MoosicBox_${{ steps.package_version.outputs.version }}_aarch64.dmg \
                      ${{ steps.assets_dir.outputs.path }}/MoosicBox${{ matrix.release.runner != 'self-hosted' && '_x64' || '' }}${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.dmg

            - name: Add MoosicBox${{ matrix.release.runner != 'self-hosted' && '_x64' || '' }}${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.exe Asset
              if: ${{ matrix.release.os == 'windows-latest' }}
              working-directory: MoosicBox/target/${{ matrix.release.profile }}
              shell: bash
              run: |
                  mv moosicbox_app.exe ${{ steps.assets_dir.outputs.path }}/MoosicBox${{ matrix.release.runner != 'self-hosted' && '_x64' || '' }}${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.exe

            - name: Add MoosicBox_x64-setup${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.exe Asset
              if: ${{ matrix.release.os == 'windows-latest' }}
              working-directory: MoosicBox/target/${{ matrix.release.profile }}/bundle
              shell: bash
              run: |
                  mv nsis/MoosicBox_${{ steps.package_version.outputs.version }}_x64-setup.exe \
                      ${{ steps.assets_dir.outputs.path }}/MoosicBox_x64-setup${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.exe

            - name: Add MoosicBox_x64${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.msi Asset
              if: ${{ matrix.release.os == 'windows-latest' }}
              working-directory: MoosicBox/target/${{ matrix.release.profile }}/bundle
              shell: bash
              run: |
                  mv msi/MoosicBox_${{ steps.package_version.outputs.version }}_x64_en-US.msi \
                      ${{ steps.assets_dir.outputs.path }}/MoosicBox_x64${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.msi

            - name: Add moosicbox${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.apk Asset
              if: ${{ matrix.release.target == 'android' }}
              working-directory: MoosicBox/packages/app/tauri/src-tauri/gen/android/app/build/outputs/apk
              shell: bash
              run: |
                  mv universal/${{ matrix.release.profile }}/app-universal-${{ matrix.release.profile }}.apk \
                      ${{ steps.assets_dir.outputs.path }}/MoosicBox${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.apk

            - name: Add moosicbox${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.aab Asset
              if: ${{ matrix.release.target == 'android' }}
              working-directory: MoosicBox/packages/app/tauri/src-tauri/gen/android/app/build/outputs/bundle
              shell: bash
              run: |
                  mv universal${{ matrix.release.profile == 'release' && 'Release' || 'Debug' }}/app-universal-${{ matrix.release.profile }}.aab \
                      ${{ steps.assets_dir.outputs.path }}/MoosicBox${{ matrix.release.tag && format('_{0}', matrix.release.tag) || '' }}.aab

            - name: Upload Assets
              uses: softprops/action-gh-release@v2
              with:
                  token: ${{ secrets.WORKFLOW_MANAGEMENT_TOKEN }}
                  files: assets/*

    compress:
        permissions: write-all

        runs-on: ubuntu-latest
        needs: package

        strategy:
            fail-fast: false
            matrix:
                compression:
                    - algorithm: xz
                      extension: xz
                      replace_extension: false
                      compression_level: 9
                      tar: true
                    - algorithm: 7z
                      extension: 7z
                      replace_extension: true
                      compression_level: 9
                      tar: false
                    - algorithm: bzip2
                      extension: bz2
                      replace_extension: false
                      compression_level: 9
                      tar: true
                    - algorithm: gzip
                      extension: gz
                      replace_extension: false
                      compression_level: 9
                      tar: true
                    - algorithm: zip
                      extension: zip
                      replace_extension: true
                      compression_level: 9
                      tar: false
                asset:
                    - name: MoosicBox_x64_macos
                      extension: app
                      decompress: true
                      decompress_file: MoosicBox_x64_macos_app.zip
                      decompress_algorithm: zip
                    # - name: MoosicBox_x64_macos_debug
                    #   extension: app
                    #   decompress: true
                    #   decompress_file: MoosicBox_x64_macos_debug_app.zip
                    #   decompress_algorithm: zip

        steps:
            - name: Set asset names
              id: asset_names
              run: |
                  RAW_NAME="${{ format('{0}{1}{2}', matrix.asset.name, matrix.asset.decompress && '_' || '.', matrix.asset.extension) }}"
                  echo "raw_name=$RAW_NAME" >> $GITHUB_OUTPUT
                  echo "existing=${{ matrix.asset.decompress && matrix.asset.decompress_file || format('{0}.{1}', matrix.asset.name, matrix.asset.extension) }}" >> $GITHUB_OUTPUT
                  INPUT="$RAW_NAME${{ matrix.asset.decompress && matrix.compression.tar && '.tar' || '' }}" >> $GITHUB_OUTPUT
                  echo "input=$INPUT" >> $GITHUB_OUTPUT
                  echo "output=${INPUT}.${{ matrix.compression.extension }}" >> $GITHUB_OUTPUT

            - name: Download ${{ matrix.asset }} Asset
              uses: dsaltares/fetch-gh-release-asset@master
              with:
                  repo: ${{ github.repository }}
                  file: ${{ steps.asset_names.outputs.existing }}
                  version: ${{ github.event.release.id }}

            - name: Decompress
              if: ${{ matrix.asset.decompress }}
              run: |
                  7z \
                      x \
                      -t${{ matrix.asset.decompress_algorithm }} \
                      ${{ steps.asset_names.outputs.existing }} \
                      -o${{ steps.asset_names.outputs.raw_name }}

            - name: Tar
              if: ${{ matrix.asset.decompress && matrix.compression.tar }}
              run: |
                  tar \
                      -cvf \
                      ${{ steps.asset_names.outputs.input }} \
                      ${{ steps.asset_names.outputs.raw_name }}

            - name: Compress ${{ matrix.asset }}
              run: |
                  7z \
                      a \
                      -mx=${{ matrix.compression.compression_level }} \
                      -t${{ matrix.compression.algorithm }} \
                      ${{ steps.asset_names.outputs.output }} \
                      ${{ steps.asset_names.outputs.input }}

            - name: Delete ${{ steps.asset_names.outputs.output }} Asset
              uses: mknejp/delete-release-assets@v1
              with:
                  fail-if-no-assets: false
                  token: ${{ github.token }}
                  tag: ${{ github.event.release.tag_name }}
                  repository: ${{ github.repository }}
                  assets: ${{ steps.asset_names.outputs.output }}

            - name: Upload Assets
              uses: softprops/action-gh-release@v2
              with:
                  token: ${{ secrets.WORKFLOW_MANAGEMENT_TOKEN }}
                  files: ${{ steps.asset_names.outputs.output }}
