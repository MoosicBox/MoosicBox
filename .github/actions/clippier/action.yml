name: "Clippier Matrix Generator"
description: "Generate CI matrices and analyze package dependencies using clippier"
author: "MoosicBox"

inputs:
    command:
        description: "Clippier command to run (features, packages, affected-packages, workspace-deps, validate-feature-propagation, setup)"
        required: true

    workspace-path:
        description: "Path to workspace/package"
        required: false
        default: "."

    os:
        description: "Target operating system"
        required: false

    offset:
        description: "Skip first N features"
        required: false

    max:
        description: "Maximum number of features"
        required: false

    max-parallel:
        description: "Maximum parallel jobs"
        required: false

    chunked:
        description: "Group features into chunks"
        required: false

    spread:
        description: "Spread features across jobs"
        required: false
        default: "false"

    randomize:
        description: "Randomize features before chunking/spreading"
        required: false
        default: "false"

    seed:
        description: "Seed for deterministic randomization"
        required: false

    features:
        description: "Specific features to include (comma-separated)"
        required: false

    skip-features:
        description: "Features to exclude (comma-separated)"
        required: false

    required-features:
        description: "Always-required features (comma-separated)"
        required: false

    packages:
        description: "Specific packages to process (comma-separated)"
        required: false

    changed-files:
        description: "List of changed files (comma-separated)"
        required: false

    git-strategy:
        description: "Git comparison strategy: auto (detect event type), workflow-history (use GitHub API), branch-comparison (compare against branch), or manual (use provided base/head)"
        required: false
        default: "auto"

    git-base:
        description: "Git base commit (only used when git-strategy is manual)"
        required: false

    git-head:
        description: "Git head commit (only used when git-strategy is manual)"
        required: false

    git-compare-branch:
        description: "Branch to compare against (for branch-comparison strategy)"
        required: false
        default: "master"

    git-workflow-name:
        description: "Workflow name for API lookups (defaults to current workflow)"
        required: false

    git-default-branch:
        description: "Default branch name"
        required: false
        default: "master"

    github-token:
        description: "GitHub token for API access (for workflow-history strategy)"
        required: false
        default: ${{ github.token }}

    github-repository:
        description: "Repository (owner/repo) for API lookups"
        required: false
        default: ${{ github.repository }}

    github-ref-name:
        description: "Current ref name for API lookups"
        required: false
        default: ${{ github.ref_name }}

    include-reasoning:
        description: "Include reasoning for why packages are affected"
        required: false
        default: "false"

    ignore:
        description: 'Glob patterns to ignore when detecting affected packages (newline or comma-separated, e.g., "**/*.md")'
        required: false

    target-package:
        description: "Package to check if affected (for affected-packages command)"
        required: false

    package:
        description: "Target package name (for workspace-deps command)"
        required: false

    all-potential-deps:
        description: "Include all potential workspace dependencies"
        required: false
        default: "false"

    additional-package-checks:
        description: "JSON array of additional package checks with summary configuration"
        required: false

    inject-reasoning:
        description: "Custom reasoning to inject into all packages"
        required: false

    inject-reasoning-condition:
        description: "Condition to inject reasoning (evaluates as bash condition)"
        required: false
        default: "true"

    force-full-matrix-condition:
        description: "Condition to force full matrix generation regardless of changes"
        required: false

    skip-on-no-changes:
        description: "Skip matrix generation if no changes detected"
        required: false
        default: "true"

    transform-name-regex:
        description: 'Regex substitution for package name (e.g., "^(moosicbox|switchy|hyperchad)_")'
        required: false

    transform-name-replacement:
        description: "Replacement string for name regex"
        required: false
        default: ""

    matrix-properties:
        description: "Comma-separated list of properties to include in matrix"
        required: false
        default: "name,path,features,requiredFeatures,os,dependencies,toolchains,ciSteps,ciToolchains,env,nightly,gitSubmodules"

    os-suffix:
        description: 'Suffix to add to OS field (e.g., "-latest")'
        required: false
        default: "-latest"

    generate-summary:
        description: "Generate GitHub workflow summary"
        required: false
        default: "false"

    summary-title:
        description: "Title for the summary section"
        required: false
        default: "Smart CI Analysis Summary"

    summary-include-seed:
        description: "Include randomization seed in summary"
        required: false
        default: "true"

    summary-event-name:
        description: "GitHub event name for summary context"
        required: false
        default: ${{ github.event_name }}

    summary-ref-name:
        description: "GitHub ref name for summary context"
        required: false
        default: ${{ github.ref_name }}

    summary-trigger-input:
        description: "Workflow input that triggered the run (for workflow_dispatch)"
        required: false

    summary-show-trigger:
        description: "Show trigger information in summary"
        required: false
        default: "true"

    summary-show-jobs-details:
        description: "Show detailed job breakdown in summary (OS, features, etc.)"
        required: false
        default: "false"

    enable-docker-analysis:
        description: "Enable Docker package analysis and matrix generation"
        required: false
        default: "false"

    docker-packages:
        description: "JSON mapping of packages to Docker info"
        required: false

    docker-name-prefix:
        description: "Prefix to add when looking up Docker packages"
        required: false
        default: ""

    clippier-version:
        description: "Git ref/tag for clippier (default: use from current repo)"
        required: false

    clippier-features:
        description: "Features to enable when building clippier"
        required: false
        default: "git-diff"

    cache-key-prefix:
        description: "Prefix for cache key"
        required: false
        default: "clippier"

    skip-cache:
        description: "Skip caching clippier binary"
        required: false
        default: "false"

    package-json:
        description: "JSON object containing matrix.package properties (for setup command)"
        required: false

    skip-checkout:
        description: "Skip repository checkout step (for setup command when already checked out)"
        required: false
        default: "false"

    checkout-fetch-depth:
        description: "Git fetch depth for checkout (for setup command)"
        required: false
        default: "0"

    rust-components:
        description: "Rust components to install (for setup command)"
        required: false
        default: "rustfmt, clippy"

outputs:
    matrix:
        description: "Generated matrix JSON for GitHub Actions"
        value: ${{ steps.run-action.outputs.matrix }}

    raw-output:
        description: "Raw output from clippier before transformation"
        value: ${{ steps.run-action.outputs.raw-output }}

    affected:
        description: "Whether target package is affected (for affected-packages command)"
        value: ${{ steps.run-action.outputs.affected }}

    reasoning:
        description: "Reasoning output (when include-reasoning is enabled)"
        value: ${{ steps.run-action.outputs.reasoning }}

    git-base:
        description: "Detected or provided git base SHA"
        value: ${{ steps.run-action.outputs.git-base }}

    git-head:
        description: "Detected or provided git head SHA"
        value: ${{ steps.run-action.outputs.git-head }}

    has-changes:
        description: "Whether any changes were detected"
        value: ${{ steps.run-action.outputs.has-changes }}

    docker-matrix:
        description: "Generated Docker build matrix (when enable-docker-analysis is true)"
        value: ${{ steps.run-action.outputs.docker-matrix }}

    has-docker-changes:
        description: "Whether any Docker packages are affected"
        value: ${{ steps.run-action.outputs.has-docker-changes }}

    docker-count:
        description: "Number of Docker images to build"
        value: ${{ steps.run-action.outputs.docker-count }}

    docker-packages-list:
        description: "Formatted list of Docker packages for summary"
        value: ${{ steps.run-action.outputs.docker-packages-list }}

    additional-checks:
        description: 'Results from additional-package-checks as JSON object keyed by output-key (e.g., {"tauri": {"affected": true, "reasoning": [...]}})'
        value: ${{ steps.run-action.outputs.additional-checks }}

runs:
    using: "composite"
    steps:
        - name: Checkout repository
          if: inputs.command == 'setup' && inputs.skip-checkout != 'true'
          uses: actions/checkout@v4
          with:
              fetch-depth: ${{ inputs.checkout-fetch-depth }}
              submodules: ${{ fromJson(inputs.package-json).gitSubmodules || false }}

        - name: Setup Rust toolchain
          if: inputs.command == 'setup'
          uses: dtolnay/rust-toolchain@stable
          with:
              toolchain: ${{ fromJson(inputs.package-json).nightly && 'nightly' || 'stable' }}
              components: ${{ inputs.rust-components }}

        - name: Setup pnpm
          if: inputs.command == 'setup' && (contains(fromJson(inputs.package-json).toolchains || '[]', 'node') || contains(fromJson(inputs.package-json).ciToolchains || '[]', 'node'))
          uses: pnpm/action-setup@v3
          with:
              version: 9

        - name: Setup Node.js
          if: inputs.command == 'setup' && (contains(fromJson(inputs.package-json).toolchains || '[]', 'node') || contains(fromJson(inputs.package-json).ciToolchains || '[]', 'node'))
          uses: actions/setup-node@v4
          with:
              node-version: latest

        - name: Setup cmake
          if: inputs.command == 'setup'
          uses: jwlawson/actions-setup-cmake@v2
          with:
              cmake-version: "3.x"

        - name: Cache clippier binary
          if: inputs.skip-cache != 'true' && inputs.command != 'setup'
          uses: actions/cache@v4
          with:
              path: ./target/release/clippier
              key: ${{ inputs.cache-key-prefix }}-${{ runner.os }}-${{ hashFiles('packages/clippier/**') }}

        - name: Build clippier
          if: inputs.command != 'setup'
          shell: bash
          run: |
              if [[ ! -f ./target/release/clippier ]] || [[ "${{ inputs.skip-cache }}" == "true" ]]; then
                echo "Building clippier with features: ${{ inputs.clippier-features }}"
                cargo build --package clippier --features "${{ inputs.clippier-features }}" --release
                chmod +x ./target/release/clippier
              else
                echo "Using cached clippier binary"
              fi

        - name: Run clippier action
          id: run-action
          shell: bash
          working-directory: ${{ github.action_path }}
          run: ./action.sh
          env:
              INPUT_COMMAND: ${{ inputs.command }}
              INPUT_WORKSPACE_PATH: ${{ inputs.workspace-path }}
              INPUT_OS: ${{ inputs.os }}
              INPUT_OFFSET: ${{ inputs.offset }}
              INPUT_MAX: ${{ inputs.max }}
              INPUT_MAX_PARALLEL: ${{ inputs.max-parallel }}
              INPUT_CHUNKED: ${{ inputs.chunked }}
              INPUT_SPREAD: ${{ inputs.spread }}
              INPUT_RANDOMIZE: ${{ inputs.randomize }}
              INPUT_SEED: ${{ inputs.seed }}
              INPUT_FEATURES: ${{ inputs.features }}
              INPUT_SKIP_FEATURES: ${{ inputs.skip-features }}
              INPUT_REQUIRED_FEATURES: ${{ inputs.required-features }}
              INPUT_PACKAGES: ${{ inputs.packages }}
              INPUT_CHANGED_FILES: ${{ inputs.changed-files }}
              INPUT_GIT_STRATEGY: ${{ inputs.git-strategy }}
              INPUT_GIT_BASE: ${{ inputs.git-base }}
              INPUT_GIT_HEAD: ${{ inputs.git-head }}
              INPUT_GIT_COMPARE_BRANCH: ${{ inputs.git-compare-branch }}
              INPUT_GIT_WORKFLOW_NAME: ${{ inputs.git-workflow-name }}
              INPUT_GIT_DEFAULT_BRANCH: ${{ inputs.git-default-branch }}
              INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
              INPUT_GITHUB_REPOSITORY: ${{ inputs.github-repository }}
              INPUT_GITHUB_REF_NAME: ${{ inputs.github-ref-name }}
              INPUT_INCLUDE_REASONING: ${{ inputs.include-reasoning }}
              INPUT_IGNORE_PATTERNS: ${{ inputs.ignore }}
              INPUT_TARGET_PACKAGE: ${{ inputs.target-package }}
              INPUT_PACKAGE: ${{ inputs.package }}
              INPUT_ALL_POTENTIAL_DEPS: ${{ inputs.all-potential-deps }}
              INPUT_ADDITIONAL_PACKAGE_CHECKS: ${{ inputs.additional-package-checks }}
              INPUT_INJECT_REASONING: ${{ inputs.inject-reasoning }}
              INPUT_INJECT_REASONING_CONDITION: ${{ inputs.inject-reasoning-condition }}
              INPUT_FORCE_FULL_MATRIX_CONDITION: ${{ inputs.force-full-matrix-condition }}
              INPUT_SKIP_ON_NO_CHANGES: ${{ inputs.skip-on-no-changes }}
              INPUT_TRANSFORM_NAME_REGEX: ${{ inputs.transform-name-regex }}
              INPUT_TRANSFORM_NAME_REPLACEMENT: ${{ inputs.transform-name-replacement }}
              INPUT_MATRIX_PROPERTIES: ${{ inputs.matrix-properties }}
              INPUT_OS_SUFFIX: ${{ inputs.os-suffix }}
              INPUT_GENERATE_SUMMARY: ${{ inputs.generate-summary }}
              INPUT_SUMMARY_TITLE: ${{ inputs.summary-title }}
              INPUT_SUMMARY_INCLUDE_SEED: ${{ inputs.summary-include-seed }}
              INPUT_SUMMARY_EVENT_NAME: ${{ inputs.summary-event-name }}
              INPUT_SUMMARY_REF_NAME: ${{ inputs.summary-ref-name }}
              INPUT_SUMMARY_TRIGGER_INPUT: ${{ inputs.summary-trigger-input }}
              INPUT_SUMMARY_SHOW_TRIGGER: ${{ inputs.summary-show-trigger }}
              INPUT_SUMMARY_SHOW_JOBS_DETAILS: ${{ inputs.summary-show-jobs-details }}
              INPUT_ENABLE_DOCKER_ANALYSIS: ${{ inputs.enable-docker-analysis }}
              INPUT_DOCKER_PACKAGES: ${{ inputs.docker-packages }}
              INPUT_DOCKER_NAME_PREFIX: ${{ inputs.docker-name-prefix }}
              INPUT_PACKAGE_JSON: ${{ inputs.package-json }}
              INPUT_SKIP_CHECKOUT: ${{ inputs.skip-checkout }}
              INPUT_CHECKOUT_FETCH_DEPTH: ${{ inputs.checkout-fetch-depth }}
              INPUT_RUST_COMPONENTS: ${{ inputs.rust-components }}
              GITHUB_EVENT_NAME: ${{ github.event_name }}
              GITHUB_EVENT_BEFORE: ${{ github.event.before }}
              GITHUB_EVENT_AFTER: ${{ github.event.after }}
              GITHUB_EVENT_FORCED: ${{ github.event.forced }}
              GITHUB_BASE_REF: ${{ github.base_ref }}
              GITHUB_SHA: ${{ github.sha }}
              GITHUB_WORKFLOW_REF: ${{ github.workflow_ref }}
