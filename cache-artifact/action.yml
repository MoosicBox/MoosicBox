name: 'Cache Artifact'
description: 'Checksums a directory or git repository and conditionally runs commands with intelligent artifact caching'
author: 'MoosicBox'

inputs:
    directory:
        description: 'Directory to checksum for change detection (mutually exclusive with repo)'
        required: false
        default: ''
    repo:
        description: 'Git repository URL to checksum for change detection (mutually exclusive with directory)'
        required: false
        default: ''
    command:
        description: 'Custom command to run when changes are detected'
        required: true
    output-path:
        description: 'Path to the output file/artifact created by the command'
        required: true
    artifact-name:
        description: 'Name for the artifact (defaults to directory name + checksum)'
        required: false
        default: ''
    cache-key-prefix:
        description: 'Prefix for cache keys (defaults to repository name)'
        required: false
        default: ''
    working-directory:
        description: 'Working directory to run the command in'
        required: false
        default: '.'
    shell:
        description: 'Shell to use for running commands'
        required: false
        default: 'bash'
    make-executable:
        description: 'Whether to make the output file executable'
        required: false
        default: 'false'
    verify-command:
        description: 'Command to run to verify the output works (e.g., "--version")'
        required: false
        default: ''

outputs:
    cache-hit:
        description: 'Whether the cache was hit (true/false)'
        value: ${{ steps.cache-check.outputs.cache-hit }}
    checksum:
        description: 'The computed checksum of the directory'
        value: ${{ steps.compute-checksum.outputs.checksum }}
    artifact-name:
        description: 'The name of the uploaded/downloaded artifact'
        value: ${{ steps.set-artifact-name.outputs.artifact-name }}

runs:
    using: 'composite'
    steps:
        - name: Validate inputs
          shell: ${{ inputs.shell }}
          run: |
              if [ -n "${{ inputs.directory }}" ] && [ -n "${{ inputs.repo }}" ]; then
                echo "‚ùå Error: Both 'directory' and 'repo' inputs are provided. Please use only one."
                exit 1
              elif [ -z "${{ inputs.directory }}" ] && [ -z "${{ inputs.repo }}" ]; then
                echo "‚ùå Error: Either 'directory' or 'repo' input must be provided."
                exit 1
              fi

        - name: Set up artifact name
          id: set-artifact-name
          shell: ${{ inputs.shell }}
          run: |
              if [ -n "${{ inputs.artifact-name }}" ]; then
                ARTIFACT_NAME="${{ inputs.artifact-name }}"
              elif [ -n "${{ inputs.directory }}" ]; then
                DIR_NAME=$(basename "${{ inputs.directory }}")
                ARTIFACT_NAME="${DIR_NAME}-cache"
              else
                REPO_NAME=$(basename "${{ inputs.repo }}" .git)
                ARTIFACT_NAME="${REPO_NAME}-cache"
              fi
              echo "artifact-name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
              echo "üè∑Ô∏è Artifact name: ${ARTIFACT_NAME}"

        - name: Compute checksum
          id: compute-checksum
          shell: ${{ inputs.shell }}
          run: |
              if [ -n "${{ inputs.directory }}" ]; then
                echo "üìÅ Computing checksum for directory: ${{ inputs.directory }}"
                if [ ! -d "${{ inputs.directory }}" ]; then
                  echo "‚ùå Directory ${{ inputs.directory }} does not exist!"
                  exit 1
                fi

                # Create a deterministic checksum of the directory
                # Using find to get all files, then checksumming their content and paths
                CHECKSUM=$(find "${{ inputs.directory }}" -type f -exec sha256sum {} + | sort -k2 | sha256sum | cut -d' ' -f1)
                echo "‚úÖ Directory checksum: ${CHECKSUM}"
              else
                echo "üì¶ Getting HEAD SHA for repository: ${{ inputs.repo }}"

                # Use git ls-remote to get the HEAD SHA - much more efficient than cloning
                CHECKSUM=$(git ls-remote "${{ inputs.repo }}" HEAD | cut -f1)

                if [ -z "$CHECKSUM" ]; then
                  echo "‚ùå Failed to get HEAD SHA for repository: ${{ inputs.repo }}"
                  exit 1
                fi

                echo "‚úÖ Repository HEAD SHA: ${CHECKSUM}"
              fi

              echo "checksum=${CHECKSUM}" >> $GITHUB_OUTPUT

        - name: Set cache key
          id: set-cache-key
          shell: ${{ inputs.shell }}
          run: |
              PREFIX="${{ inputs.cache-key-prefix }}"
              if [ -z "$PREFIX" ]; then
                PREFIX="${{ github.repository }}"
              fi
              CACHE_KEY="${PREFIX}-${{ steps.set-artifact-name.outputs.artifact-name }}-${{ steps.compute-checksum.outputs.checksum }}"
              echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT
              echo "üîë Cache key: ${CACHE_KEY}"

        - name: Expand output path
          id: expand-path
          shell: ${{ inputs.shell }}
          run: |
              # Expand tilde and any other shell expansions in the output path
              EXPANDED_PATH=$(eval echo "${{ inputs.output-path }}")
              echo "expanded-path=${EXPANDED_PATH}" >> $GITHUB_OUTPUT
              echo "üìç Expanded output path: ${EXPANDED_PATH}"

        - name: Fix Windows path if needed
          id: fix-windows-path
          shell: ${{ inputs.shell }}
          run: |
              EXPANDED_PATH="${{ steps.expand-path.outputs.expanded-path }}"

              # On Windows, convert Unix-style paths to Windows-style paths
              if [ "${{ runner.os }}" = "Windows" ]; then
                echo "ü™ü Windows detected, checking path format..."

                # Convert /c/Users/... to C:\Users\... format
                if [[ "$EXPANDED_PATH" =~ ^/([a-zA-Z])/(.*)$ ]]; then
                  DRIVE_LETTER="${BASH_REMATCH[1]}"
                  REST_OF_PATH="${BASH_REMATCH[2]}"
                  WINDOWS_PATH="${DRIVE_LETTER}:\\${REST_OF_PATH//\//\\}"
                  echo "üîÑ Converting Unix-style path to Windows-style:"
                  echo "  From: ${EXPANDED_PATH}"
                  echo "  To: ${WINDOWS_PATH}"
                  EXPANDED_PATH="${WINDOWS_PATH}"
                fi

                # If the expanded path doesn't end with .exe and the file doesn't exist,
                # but a .exe version does exist, use that instead
                if [[ ! "$EXPANDED_PATH" =~ \.exe$ ]] && [ ! -f "$EXPANDED_PATH" ] && [ -f "${EXPANDED_PATH}.exe" ]; then
                  echo "ü™ü Windows detected: Found ${EXPANDED_PATH}.exe instead of ${EXPANDED_PATH}"
                  EXPANDED_PATH="${EXPANDED_PATH}.exe"
                fi
              fi

              echo "final-path=${EXPANDED_PATH}" >> $GITHUB_OUTPUT
              echo "üìç Final output path: ${EXPANDED_PATH}"

        - name: Check for existing cache
          id: cache-check
          uses: actions/cache/restore@v4
          with:
              path: ${{ steps.fix-windows-path.outputs.final-path }}
              key: ${{ steps.set-cache-key.outputs.cache-key }}
              lookup-only: true

        - name: Restore cache
          if: steps.cache-check.outputs.cache-hit == 'true'
          id: cache-restore
          uses: actions/cache/restore@v4
          with:
              path: ${{ steps.fix-windows-path.outputs.final-path }}
              key: ${{ steps.set-cache-key.outputs.cache-key }}

        - name: Check for existing artifact
          if: steps.cache-check.outputs.cache-hit != 'true'
          id: check-artifact
          shell: ${{ inputs.shell }}
          run: |
              ARTIFACT_NAME="${{ steps.set-artifact-name.outputs.artifact-name }}-${{ steps.compute-checksum.outputs.checksum }}"
              echo "üîç Checking for existing artifact: $ARTIFACT_NAME"

              # Use GitHub API to check if artifact exists
              ARTIFACT_EXISTS=$(curl -s \
                  -H "Authorization: Bearer ${{ github.token }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?name=$ARTIFACT_NAME" \
                  | jq -r '.artifacts | length > 0')

              echo "artifact-exists=$ARTIFACT_EXISTS" >> $GITHUB_OUTPUT

              if [ "$ARTIFACT_EXISTS" = "true" ]; then
                  echo "‚úÖ Artifact found: $ARTIFACT_NAME"
              else
                  echo "‚ùå Artifact not found: $ARTIFACT_NAME (will build from scratch)"
              fi

        - name: Download existing artifact
          if: steps.cache-check.outputs.cache-hit != 'true' && steps.check-artifact.outputs.artifact-exists == 'true'
          id: download-artifact
          uses: actions/download-artifact@v4
          with:
              name: ${{ steps.set-artifact-name.outputs.artifact-name }}-${{ steps.compute-checksum.outputs.checksum }}
              path: ${{ inputs.working-directory }}

        - name: Run custom command
          if: steps.cache-check.outputs.cache-hit != 'true' && (steps.check-artifact.outputs.artifact-exists != 'true' || steps.download-artifact.outcome == 'failure')
          shell: ${{ inputs.shell }}
          working-directory: ${{ inputs.working-directory }}
          run: |
              echo "üöÄ Running custom command: ${{ inputs.command }}"
              echo "üìÇ Working directory: ${{ inputs.working-directory }}"
              ${{ inputs.command }}

              # Verify the output was created (using final path)
              FINAL_PATH="${{ steps.fix-windows-path.outputs.final-path }}"
              if [ ! -e "${FINAL_PATH}" ]; then
                echo "‚ùå Output file ${FINAL_PATH} was not created by the command!"
                exit 1
              fi
              echo "‚úÖ Command completed successfully, output created: ${FINAL_PATH}"

        - name: Save to cache
          if: steps.cache-check.outputs.cache-hit != 'true' && (steps.check-artifact.outputs.artifact-exists != 'true' || steps.download-artifact.outcome == 'failure')
          uses: actions/cache/save@v4
          with:
              path: ${{ steps.fix-windows-path.outputs.final-path }}
              key: ${{ steps.set-cache-key.outputs.cache-key }}

        - name: Upload artifact
          if: steps.cache-check.outputs.cache-hit != 'true' && (steps.check-artifact.outputs.artifact-exists != 'true' || steps.download-artifact.outcome == 'failure')
          uses: actions/upload-artifact@v4
          with:
              name: ${{ steps.set-artifact-name.outputs.artifact-name }}-${{ steps.compute-checksum.outputs.checksum }}
              path: ${{ steps.fix-windows-path.outputs.final-path }}
              retention-days: 30
              compression-level: 9

        - name: Setup output file
          shell: ${{ inputs.shell }}
          run: |
              FINAL_PATH="${{ steps.fix-windows-path.outputs.final-path }}"

              # Make executable if requested
              if [ "${{ inputs.make-executable }}" = "true" ]; then
                echo "üîß Making output file executable..."
                chmod +x "${FINAL_PATH}"
              fi

              # Log detailed info
              echo "üîß Output file status:"
              echo "  - Cache hit: ${{ steps.cache-check.outputs.cache-hit }}"
              echo "  - Checksum: ${{ steps.compute-checksum.outputs.checksum }}"
              if [ -f "${FINAL_PATH}" ]; then
                echo "  - File size: $(du -h "${FINAL_PATH}" | cut -f1)"
                echo "  - File path: $(readlink -f "${FINAL_PATH}")"
                if [ "${{ inputs.make-executable }}" = "true" ]; then
                  echo "  - Executable: $(ls -la "${FINAL_PATH}" | cut -d' ' -f1)"
                fi
              fi

              # Verify the output works if verification command provided
              if [ -n "${{ inputs.verify-command }}" ]; then
                echo "üß™ Verifying output file..."
                "${FINAL_PATH}" ${{ inputs.verify-command }}
                echo "‚úÖ Output file verification successful"
              fi

        - name: Report cache status
          shell: ${{ inputs.shell }}
          run: |
              FINAL_PATH="${{ steps.fix-windows-path.outputs.final-path }}"

              if [ "${{ steps.cache-check.outputs.cache-hit }}" = "true" ]; then
                echo "üéØ Cache HIT! Using cached version of ${FINAL_PATH}"
              elif [ "${{ steps.check-artifact.outputs.artifact-exists }}" = "true" ] && [ "${{ steps.download-artifact.outcome }}" = "success" ]; then
                echo "üì¶ Artifact downloaded successfully"
              elif [ "${{ steps.check-artifact.outputs.artifact-exists }}" = "true" ] && [ "${{ steps.download-artifact.outcome }}" = "failure" ]; then
                echo "‚ö†Ô∏è Artifact exists but download failed - built new version"
              else
                echo "üî® No existing cache or artifact found - built new version"
              fi

              echo "üìä Summary:"
              if [ -n "${{ inputs.directory }}" ]; then
                echo "  - Source: Directory ${{ inputs.directory }}"
              else
                echo "  - Source: Repository ${{ inputs.repo }}"
              fi
              echo "  - Checksum: ${{ steps.compute-checksum.outputs.checksum }}"
              echo "  - Cache Key: ${{ steps.set-cache-key.outputs.cache-key }}"
              echo "  - Artifact: ${{ steps.set-artifact-name.outputs.artifact-name }}-${{ steps.compute-checksum.outputs.checksum }}"
              echo "  - Output: ${FINAL_PATH}"
              if [ "${{ steps.cache-check.outputs.cache-hit }}" != "true" ]; then
                echo "  - Artifact exists: ${{ steps.check-artifact.outputs.artifact-exists }}"
              fi

branding:
    icon: 'package'
    color: 'blue'
