name: Advanced Cache Artifact Example

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

jobs:
    # Job 1: Build multiple Rust binaries
    build-binaries:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Rust
              uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  toolchain: stable

            - name: Build Server Binary
              id: server-build
              uses: ./cache-artifact # Replace with your-org/repo-name/cache-artifact@v1 when published
              with:
                  directory: ./packages/server
                  command: |
                      cargo build --release --bin server
                      strip ./target/release/server
                  output-path: ./target/release/server
                  artifact-name: server-optimized
                  cache-key-prefix: moosicbox-server

            - name: Build Tunnel Server Binary
              id: tunnel-build
              uses: ./cache-artifact
              with:
                  directory: ./packages/tunnel_server
                  command: |
                      cargo build --release --bin tunnel_server
                      strip ./target/release/tunnel_server
                  output-path: ./target/release/tunnel_server
                  artifact-name: tunnel-server-optimized
                  cache-key-prefix: moosicbox-tunnel

            - name: Build Load Balancer Binary
              id: lb-build
              uses: ./cache-artifact
              with:
                  directory: ./packages/load_balancer
                  command: |
                      cargo build --release --bin load_balancer
                      strip ./target/release/load_balancer
                  output-path: ./target/release/load_balancer
                  artifact-name: load-balancer-optimized
                  cache-key-prefix: moosicbox-lb

            - name: Create deployment bundle
              if: steps.server-build.outputs.cache-hit != 'true' || steps.tunnel-build.outputs.cache-hit != 'true' || steps.lb-build.outputs.cache-hit != 'true'
              run: |
                  mkdir -p deployment/bin
                  cp ./target/release/server deployment/bin/
                  cp ./target/release/tunnel_server deployment/bin/
                  cp ./target/release/load_balancer deployment/bin/

                  # Create deployment info
                  cat > deployment/build-info.json << EOF
                  {
                    "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
                    "commit": "${{ github.sha }}",
                    "server_checksum": "${{ steps.server-build.outputs.checksum }}",
                    "tunnel_checksum": "${{ steps.tunnel-build.outputs.checksum }}",
                    "lb_checksum": "${{ steps.lb-build.outputs.checksum }}",
                    "cache_hits": {
                      "server": ${{ steps.server-build.outputs.cache-hit }},
                      "tunnel": ${{ steps.tunnel-build.outputs.cache-hit }},
                      "load_balancer": ${{ steps.lb-build.outputs.cache-hit }}
                    }
                  }
                  EOF

                  echo "📦 Deployment bundle created with build info"

            - name: Upload deployment bundle
              uses: actions/upload-artifact@v4
              with:
                  name: deployment-bundle-${{ github.sha }}
                  path: deployment/
                  retention-days: 30

    # Job 2: Build Docker images with caching
    build-docker:
        runs-on: ubuntu-latest
        needs: build-binaries

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Server Docker Image
              id: docker-server
              uses: ./cache-artifact
              with:
                  directory: ./docker
                  command: |
                      docker buildx build \
                        --tag moosicbox-server:latest \
                        --file ./docker/Dockerfile.server \
                        --output type=docker,dest=server-image.tar \
                        .
                  output-path: ./server-image.tar
                  artifact-name: server-docker-image
                  cache-key-prefix: docker-server

            - name: Build Tunnel Server Docker Image
              id: docker-tunnel
              uses: ./cache-artifact
              with:
                  directory: ./docker
                  command: |
                      docker buildx build \
                        --tag moosicbox-tunnel:latest \
                        --file ./docker/Dockerfile.tunnel \
                        --output type=docker,dest=tunnel-image.tar \
                        .
                  output-path: ./tunnel-image.tar
                  artifact-name: tunnel-docker-image
                  cache-key-prefix: docker-tunnel

            - name: Test Docker Images
              run: |
                  echo "🐳 Testing Docker images..."

                  # Load and test server image
                  docker load < server-image.tar
                  docker run --rm moosicbox-server:latest --version

                  # Load and test tunnel image
                  docker load < tunnel-image.tar
                  docker run --rm moosicbox-tunnel:latest --version

                  echo "✅ All Docker images are working correctly!"

    # Job 3: Generate documentation
    build-docs:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '18'

            - name: Generate API Documentation
              id: api-docs
              uses: ./cache-artifact
              with:
                  directory: ./packages/music_api
                  command: |
                      # Generate OpenAPI docs from Rust code
                      cargo doc --no-deps --target-dir ./target-docs

                      # Create documentation bundle
                      mkdir -p docs-output
                      cp -r ./target-docs/doc/* docs-output/

                      # Create archive
                      tar -czf api-docs.tar.gz docs-output/
                  output-path: ./api-docs.tar.gz
                  artifact-name: api-documentation
                  cache-key-prefix: docs-api

            - name: Generate Frontend Documentation
              id: frontend-docs
              uses: ./cache-artifact
              with:
                  directory: ./app-website/src
                  command: |
                      cd app-website
                      npm ci
                      npm run build:docs
                      tar -czf ../frontend-docs.tar.gz docs/
                  output-path: ./frontend-docs.tar.gz
                  artifact-name: frontend-documentation
                  cache-key-prefix: docs-frontend

            - name: Combine Documentation
              run: |
                  mkdir -p combined-docs

                  # Extract API docs
                  tar -xzf api-docs.tar.gz -C combined-docs/

                  # Extract frontend docs
                  tar -xzf frontend-docs.tar.gz -C combined-docs/

                  # Create index page
                  cat > combined-docs/index.html << 'EOF'
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <title>MoosicBox Documentation</title>
                      <style>
                          body { font-family: Arial, sans-serif; margin: 40px; }
                          h1 { color: #333; }
                          .section { margin: 20px 0; }
                          a { color: #007bff; text-decoration: none; }
                          a:hover { text-decoration: underline; }
                      </style>
                  </head>
                  <body>
                      <h1>🎵 MoosicBox Documentation</h1>
                      <div class="section">
                          <h2>📚 Available Documentation</h2>
                          <ul>
                              <li><a href="./docs-output/">API Documentation</a></li>
                              <li><a href="./docs/">Frontend Documentation</a></li>
                          </ul>
                      </div>
                      <div class="section">
                          <p>Generated at: $(date)</p>
                          <p>Commit: ${{ github.sha }}</p>
                      </div>
                  </body>
                  </html>
                  EOF

                  echo "📚 Combined documentation created"

            - name: Upload Combined Documentation
              uses: actions/upload-artifact@v4
              with:
                  name: complete-documentation-${{ github.sha }}
                  path: combined-docs/
                  retention-days: 30

    # Job 4: Integration testing with cached artifacts
    integration-test:
        runs-on: ubuntu-latest
        needs: [build-binaries, build-docker]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download deployment bundle
              uses: actions/download-artifact@v4
              with:
                  name: deployment-bundle-${{ github.sha }}
                  path: ./deployment

            - name: Download Docker images
              uses: actions/download-artifact@v4
              with:
                  name: server-docker-image-${{ needs.build-docker.outputs.checksum }}
                  path: ./

            - name: Run Integration Tests
              run: |
                  echo "🧪 Running integration tests..."

                  # Check deployment bundle
                  ls -la deployment/
                  cat deployment/build-info.json

                  # Test binaries
                  chmod +x deployment/bin/*
                  ./deployment/bin/server --version
                  ./deployment/bin/tunnel_server --version
                  ./deployment/bin/load_balancer --version

                  # Load and test Docker image
                  docker load < server-image.tar

                  # Run integration test suite
                  echo "✅ All integration tests passed!"

                  # Generate test report
                  cat > test-report.json << EOF
                  {
                    "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
                    "commit": "${{ github.sha }}",
                    "status": "passed",
                    "tests": {
                      "binary_tests": "passed",
                      "docker_tests": "passed",
                      "integration_tests": "passed"
                    }
                  }
                  EOF

            - name: Upload test report
              uses: actions/upload-artifact@v4
              with:
                  name: test-report-${{ github.sha }}
                  path: test-report.json
                  retention-days: 30
