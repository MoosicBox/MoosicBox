description: "Rust-specific development patterns, workspace management, and best practices for MoosicBox"
---

# Rust Development Guidelines for MoosicBox

## Workspace Structure

MoosicBox uses a Cargo workspace with 120+ packages organized by domain functionality. The main workspace configuration is in @Cargo.toml.

### Package Organization Philosophy
- **Domain-Driven Design**: Packages are organized by business domain and functionality
- **Modular Architecture**: Clear separation between different areas of functionality
- **Minimal Dependencies**: Each package only depends on what it actually needs
- **Underscore Naming**: All packages use underscore naming (e.g., `moosicbox_audio_decoder`)

### Package Categories
- **Audio Processing**: Decoding, encoding, resampling, output (@packages/audio_*)
- **Database**: Connection management, schema, migrations (@packages/database*)
- **Web Services**: HTTP, WebSocket, APIs (@packages/web_*, @packages/ws*)
- **UI Framework**: HyperChad framework packages (@packages/hyperchad/*)
- **Infrastructure**: Logging, config, utilities (@packages/logging/, @packages/config/)
- **Core Services**: Player, library management, streaming (@packages/player/, @packages/library/)

## Code Quality Standards

### Clippy Configuration
Every package must have these clippy attributes in lib.rs and/or main.rs:

```rust
#![cfg_attr(feature = "fail-on-warnings", deny(warnings))]
#![warn(clippy::all, clippy::pedantic, clippy::nursery, clippy::cargo)]
#![allow(clippy::multiple_crate_versions)]
```

### Error Handling Patterns
- **Use `#[must_use]`**: On all constructors and getter methods
- **Document errors**: Use bullet points with asterisks (*) for error documentation
- **Comprehensive docs**: Document all possible error conditions
- **Result<T, E>** for fallible operations
- Create custom error types for each package when needed
- Leverage `?` operator for error propagation
- Check @packages/assert/ for assertion utilities

```rust
/// Decodes an audio file to PCM format.
///
/// # Errors
///
/// * File not found or cannot be read
/// * Unsupported audio format
/// * Corrupted audio data
/// * Insufficient memory for decoding
pub fn decode_audio(&self, path: &Path) -> Result<AudioBuffer, AudioError> {
    // Implementation
}
```

### Documentation Standards
- **Bullet points**: Use asterisks (*) not dashes (-) for bullet points in comments
- **Comprehensive docs**: Document all public APIs with examples where helpful
- **Error documentation**: Always document possible errors for Result-returning functions

## Data Structure Patterns

### Deterministic Collections
- **Never use HashMap**: Always use BTreeMap for deterministic behavior
- **Never use HashSet**: Always use BTreeSet for deterministic behavior
- **Ordered keys**: Ensure all key types implement Ord and PartialOrd
- **Consistent iteration**: Ensure consistent iteration order across runs

### ID Type Patterns
- **Strong typing**: Use newtype wrappers for all ID types
- **UUID-based**: Use UUID v4 for all ID generation where appropriate
- **Serialization**: Support serde serialization for all ID types
- **Ordering**: Implement Ord for use in BTreeMap/BTreeSet

### Serialization Patterns
- **SCREAMING_SNAKE_CASE**: Use for all serde rename attributes
- **Consistent naming**: Use same naming convention across all types
- **Optional serde**: Always make serde support optional via features

## Key Development Patterns

### Async Programming
- Heavy use of `tokio` for async runtime
- See @packages/async/ and @packages/async_service/ for async patterns
- Channel-based communication patterns in @packages/channel_utils/
- **Structured concurrency**: Use proper async patterns and avoid blocking
- **Resource cleanup**: Ensure proper cleanup of async resources
- **Error propagation**: Handle async errors appropriately

### Configuration Management
- Environment-based configuration in @packages/config/
- Environment utilities in @packages/env_utils/
- Database configuration handled in @packages/database_connection/
- **TOML configuration**: Human-readable configuration format
- **Environment variables**: Support for environment-based overrides

### Logging & Observability
- Structured logging setup in @packages/logging/
- Telemetry and metrics in @packages/telemetry/
- Use `RUST_LOG="moosicbox=debug,hyperchad=debug,switchy=debug"` for development logging
- **Structured logging**: Consistent log format across services
- **Log levels**: Configurable logging verbosity
- **Performance monitoring**: Track application performance

## Audio Processing Patterns

### Audio Pipeline Architecture
1. **Decode**: @packages/audio_decoder/ - Convert audio files to PCM
2. **Process**: @packages/resampler/ - Resample if needed
3. **Encode**: @packages/audio_encoder/ - Encode for streaming
4. **Output**: @packages/audio_output/ - Send to audio devices

### Performance Considerations
- Use `cargo build --release` for audio processing
- Profile with `cargo bench` and `perf` tools
- Consider SIMD optimizations for audio DSP
- **Memory management**: Avoid allocations in audio processing hot paths
- **Real-time constraints**: Ensure consistent audio processing timing

### Format Support
- **Conditional compilation**: Use features for format-specific codecs
- **Plugin architecture**: Support for external codec plugins
- **Metadata handling**: Consistent metadata extraction and handling
- **Error recovery**: Graceful handling of corrupted audio data

## Database Patterns

### Multi-Database Support
- Database abstraction in @packages/database/
- Connection management in @packages/database_connection/
- Schema definitions in @packages/schema/
- **Feature flags**: Optional support for each database type
- **Connection pooling**: Efficient connection management

### Migration Strategy
- Use diesel or sqlx for database migrations
- Support PostgreSQL, MySQL, and SQLite
- Test against all supported databases in CI
- **Version-controlled migrations**: Database schema versioning
- **Rollback support**: Safe migration rollback procedures

### Performance Optimization
- **Query optimization**: Efficient database queries
- **Indexing strategy**: Proper database indexing for performance
- **Caching**: Strategic caching of frequently accessed data
- **Batch operations**: Efficient bulk data operations

## Web Service Patterns

### HTTP Services
- Base HTTP utilities in @packages/http/
- Web server framework in @packages/web_server/
- CORS handling in @packages/web_server/cors/
- **HTTP standards**: Follow HTTP specifications and best practices
- **Authentication**: Secure authentication and authorization
- **Rate limiting**: Protect against abuse and overload

### Real-time Communication
- WebSocket implementation in @packages/ws/
- State synchronization patterns
- Connection management and reconnection logic
- **Protocol design**: Efficient binary protocols for real-time data
- **Connection pooling**: Manage WebSocket connections efficiently

### API Design
- **RESTful APIs**: Follow REST principles for HTTP APIs
- **GraphQL support**: Consider GraphQL for complex queries
- **Versioning**: API versioning strategy for backward compatibility
- **Documentation**: Comprehensive API documentation

## Testing Strategy

### Unit Tests
- Each package should have comprehensive unit tests
- Use `cargo test` to run all tests
- Mock external dependencies appropriately
- **Test organization**: Clear test structure and naming
- **Coverage**: Aim for high test coverage on critical paths

### Integration Tests
- Test full audio pipeline end-to-end
- Test database operations against real databases
- Test web service endpoints
- **Cross-package testing**: Test interactions between packages
- **Real-world scenarios**: Test with realistic data and usage patterns

### Performance Tests
- Benchmark audio processing performance
- Load test web services
- Memory usage profiling
- **Regression testing**: Prevent performance regressions
- **Profiling**: Regular performance profiling and optimization

## Build Profiles

The project defines several build profiles in @Cargo.toml:

- `release` - Standard optimized build
- `debug-release` - Release with debug symbols
- `release-lto` - Release with link-time optimization
- `small` - Size-optimized build
- `fast` - Fast compilation for development

### Development Workflow
- **Continuous checking**: Use `cargo watch -x check` for development
- **Clippy compliance**: All code must pass `cargo clippy --all-targets --all-features`
- **Auto-fixing**: Use `cargo clippy --fix` for automatic fixes where possible
- **Formatting**: Use `cargo fmt` for consistent code formatting

## Dependencies Management

### Internal Dependencies
- All MoosicBox packages are versioned together at 0.1.1
- Use workspace dependencies for consistency
- Prefer internal packages over external crates when functionality exists
- **Always use `workspace = true`**: Never use path-based dependencies
- **Minimal dependencies**: Only depend on packages actually needed

### External Dependencies
- Pin versions for stability
- Regular dependency updates via Dependabot
- Security auditing with `cargo audit`
- **Full version numbers**: Always use complete semantic versions
- **Latest versions**: Regularly update to latest stable versions

## Code Quality

### Linting
- Use `cargo clippy --all-targets --all-features`
- Configuration in @clippy.toml
- Custom clippy rules in @packages/clippier/
- **Strict standards**: Enforce high code quality standards
- **Automated checking**: Use CI/CD for automated quality checks

### Formatting
- Use `cargo fmt` for consistent formatting
- EditorConfig in @.editorconfig
- **No trailing whitespace**: `trim_trailing_whitespace = true`
- **LF line endings**: `end_of_line = lf`
- **Final newline**: `insert_final_newline = true`

### Security
- Dependency auditing with `cargo deny`
- Configuration in @deny.toml
- Regular security updates
- **Input validation**: Validate all inputs at system boundaries
- **Safe parsing**: Use safe parsing for potentially malicious files

## Cross-Platform Considerations

### Platform Support
- **Primary targets**: Linux, macOS, Windows
- **Audio backends**: Platform-specific audio output backends
- **File system**: Handle platform-specific file system differences
- **Dependencies**: Manage platform-specific dependencies

### Audio Platform Support
- **Linux**: ALSA, PulseAudio, JACK support
- **macOS**: CoreAudio integration
- **Windows**: WASAPI, DirectSound support
- **Mobile**: Consider iOS/Android audio backends

### Conditional Compilation
- Use `cfg` attributes for platform-specific code
- Feature flags for optional platform support
- Graceful degradation when features unavailable
- Consistent APIs across platforms
