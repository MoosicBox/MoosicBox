---
description: "Music service integrations (Tidal, Qobuz, YouTube), API architecture, and development patterns"
globs:
  - "packages/music_api/**/*"
  - "packages/tidal/**/*"
  - "packages/qobuz/**/*"
  - "packages/yt/**/*"
  - "packages/library/**/*"
  - "packages/search/**/*"
alwaysApply: true
---

# Music Service Integration & API Guide

## Music API Architecture

MoosicBox provides a unified API layer that abstracts multiple music sources, allowing seamless integration of local libraries and streaming services.

### Core API Components

#### Music API Core (@packages/music_api/)
- **Unified Interface**: Single API for all music sources
- **Source Abstraction**: Hide implementation details of different services
- **Caching Layer**: Reduce API calls and improve performance
- **Rate Limiting**: Respect service API limits

#### API Helpers (@packages/music_api/helpers/)
- Common utilities for API interactions
- Authentication helpers
- Request/response transformation utilities
- Error handling and retry logic

#### API Models (@packages/music_api/models/)
- Shared data structures across all music sources
- Serialization/deserialization for API responses
- Type-safe model definitions

#### Music API Implementation (@packages/music_api/api/)
- Concrete API endpoint implementations
- Route handling and HTTP request processing
- OpenAPI/Swagger documentation

## Streaming Service Integrations

### Tidal Integration (@packages/tidal/)

#### Features
- **Hi-Fi & MQA Streaming**: Lossless and Master Quality Authenticated audio
- **Extensive Catalog**: Millions of tracks and albums
- **Artist Information**: Detailed metadata and artist biographies
- **Playlist Support**: Access to user playlists and curated content

#### Implementation Details
- OAuth 2.0 authentication flow
- PKCE (Proof Key for Code Exchange) for security
- Session management and token refresh
- Quality tier selection (Normal, Hi-Fi, MQA)

### Qobuz Integration (@packages/qobuz/)

#### Features
- **Studio Quality**: Up to 24-bit/192kHz streaming
- **Editorial Content**: Reviews and articles
- **Purchase Integration**: Buy tracks directly
- **Classical Music Focus**: Excellent classical music catalog

#### Implementation Details
- Username/password authentication
- Streaming URL generation with quality selection
- Metadata extraction and caching
- Geographic availability checking

### YouTube Integration (@packages/yt/)

#### Features
- **Vast Catalog**: Access to YouTube's music content
- **Music Videos**: Video streaming alongside audio
- **User Uploads**: Access to user-generated content
- **YouTube Music**: Integration with YouTube Music service

#### Implementation Details
- YouTube Data API v3 integration
- Video/audio stream extraction
- Search and recommendation algorithms
- Content filtering and age restrictions

## Local Library Management (@packages/library/)

### Library Features
- **File System Scanning**: Automatic discovery of music files
- **Metadata Extraction**: ID3, FLAC, APE tag parsing
- **Duplicate Detection**: Find and manage duplicate tracks
- **Watch Folders**: Monitor directories for new music
- **Collection Organization**: Albums, artists, genres, playlists

### Library Models (@packages/library/models/)
- Database schemas for music metadata
- Relationship models (artist -> album -> track)
- User-specific data (ratings, play counts, favorites)

### Music API Integration (@packages/library/music_api/)
- Bridge between local library and unified music API
- Consistent API endpoints for local music
- Integration with search and filtering

## Search Integration (@packages/search/)

### Global Search Features
- **Multi-Source Search**: Search across all connected services and local library
- **Unified Results**: Combine results from different sources
- **Search Filters**: Filter by type (artist, album, track), source, quality
- **Search History**: Remember recent searches
- **Autocomplete**: Suggest searches as user types

### Search Implementation
- Elasticsearch integration for advanced search
- Full-text search across metadata
- Fuzzy matching for typos and variations
- Performance optimization for large libraries

## Remote Library Access (@packages/remote_library/)

### Features
- **Server Discovery**: Automatic discovery of other MoosicBox servers on network
- **Authentication**: Secure access to remote libraries
- **Streaming**: Stream music from remote servers
- **Synchronization**: Keep track information synchronized

### Network Discovery
- mDNS/Bonjour for local network discovery (@packages/mdns/)
- Manual server configuration
- Connection health monitoring
- Automatic reconnection handling

## API Development Guidelines

### Authentication Patterns
- **Service-Specific Auth**: Each service handles its own authentication
- **Token Management**: Secure storage and refresh of access tokens
- **User Session**: Link service accounts to MoosicBox user accounts
- **Credential Security**: Encrypt stored credentials

### Rate Limiting & Caching
- **Respect API Limits**: Implement appropriate rate limiting
- **Intelligent Caching**: Cache metadata and search results
- **Cache Invalidation**: Handle cache updates and expiration
- **Offline Support**: Provide functionality when services are unavailable

### Error Handling
- **Graceful Degradation**: Continue working when services are down
- **User-Friendly Errors**: Present meaningful error messages
- **Retry Logic**: Automatic retry for transient failures
- **Logging**: Comprehensive logging for debugging API issues

### Data Consistency
- **Unified Models**: Use consistent data structures across services
- **Metadata Normalization**: Handle differences in service metadata
- **Quality Standards**: Ensure consistent audio quality reporting
- **Deduplication**: Handle duplicate content across services

## Testing API Integrations

### Unit Testing
- Mock service responses for predictable testing
- Test authentication flows
- Validate data transformation logic
- Test error handling scenarios

### Integration Testing
- Test against live APIs (with caution for rate limits)
- Validate end-to-end data flows
- Test service failover scenarios
- Performance testing for API response times

### Service-Specific Testing
- **Tidal**: Test different quality tiers and authentication
- **Qobuz**: Validate geographic restrictions and purchasing flows
- **YouTube**: Test content filtering and extraction
- **Local Library**: Test file format support and metadata extraction

## Configuration & Environment

### Service Credentials
- Store API keys and secrets securely
- Environment variable configuration
- Runtime credential management
- Service availability configuration

### Feature Flags
- Enable/disable specific service integrations
- A/B testing for API changes
- Gradual rollout of new features
- Service-specific feature toggles

