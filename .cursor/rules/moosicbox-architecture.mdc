description: "Architectural patterns, principles, and design decisions for MoosicBox music server"
---

# MoosicBox Architecture Patterns

## Domain-Driven Design Principles

### Package Organization by Domain
MoosicBox follows domain-driven design with packages organized by business functionality:

#### Core Domain Separation
- **Audio Processing**: Decoding, encoding, resampling, output
- **Database**: Connection management, schema, migrations
- **Web Services**: HTTP, WebSocket, APIs
- **UI Framework**: HyperChad framework components
- **Infrastructure**: Logging, config, utilities
- **Core Services**: Player, library management, streaming

#### Package Categories
1. **Audio Processing**: Format-specific codecs and audio pipeline (@packages/audio_*)
2. **Database**: Multi-database support and data management (@packages/database*)
3. **Web Services**: HTTP/WebSocket APIs and real-time communication (@packages/web_*, @packages/ws*)
4. **UI Framework**: HyperChad reactive UI components (@packages/hyperchad/*)
5. **Infrastructure**: Cross-cutting concerns like logging and config (@packages/logging/, @packages/config/)
6. **Core Services**: Business logic for music playback and library management (@packages/player/, @packages/library/)

### Dependency Direction Rules
- **Audio packages** depend on format-specific libraries and core audio utilities
- **Database packages** depend on database drivers and connection management
- **Web service packages** depend on HTTP libraries and database packages
- **UI packages** depend on web services and state management
- **No circular dependencies** between any packages
- **Minimal coupling** between unrelated domains

## Clean Architecture Implementation

### Separation of Concerns
Each package has a single, well-defined responsibility:

```
Audio (Processing)     Database (Storage)     Web (Interface)
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│ audio_decoder   │    │ database        │    │ web_server      │
│ audio_encoder   │    │ schema          │    │ ws              │
│ resampler       │◄───│ migrations      │◄───│ http            │
│ audio_output    │    │ connection      │    │ api             │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

### Audio Processing Patterns
- **Format abstraction**: Common interface for all audio formats
- **Pipeline architecture**: Modular audio processing pipeline
- **Performance optimization**: SIMD and real-time audio processing
- **Error recovery**: Graceful handling of corrupted audio data

### Database Patterns
- **Multi-database support**: Abstract over PostgreSQL, MySQL, SQLite
- **Connection pooling**: Efficient connection management
- **Migration support**: Database schema versioning and migrations
- **Transaction handling**: Proper transaction management and rollback

### Web Service Patterns
- **HTTP standards**: Follow HTTP specifications and best practices
- **Real-time communication**: WebSocket for live updates and streaming
- **API versioning**: Backward-compatible API evolution
- **Authentication**: Secure user authentication and authorization

## Code Quality Patterns

### Clippy Configuration Standard
Every package must include these exact clippy attributes:

```rust
#![cfg_attr(feature = "fail-on-warnings", deny(warnings))]
#![warn(clippy::all, clippy::pedantic, clippy::nursery, clippy::cargo)]
#![allow(clippy::multiple_crate_versions)]
```

### Error Handling Patterns
- **`#[must_use]` attributes**: On all constructors and getter methods
- **Comprehensive error docs**: Document all possible error conditions
- **Bullet point format**: Use asterisks (*) for error documentation
- **Audio-specific errors**: Detailed error information for audio processing failures

```rust
/// Decodes an audio file to PCM format.
///
/// # Errors
///
/// * File not found or cannot be read
/// * Unsupported audio format or codec
/// * Corrupted audio data or invalid headers
/// * Insufficient memory for audio buffer allocation
/// * Hardware audio device unavailable
pub fn decode_audio(&self, path: &Path) -> Result<AudioBuffer, AudioError>
```

### Documentation Standards
- **Public API documentation**: All public functions, structs, and enums
- **Audio format documentation**: Document supported formats and limitations
- **Performance notes**: Document performance characteristics and constraints
- **Bullet points**: Use asterisks (*) not dashes (-) in documentation

## Data Structure Patterns

### Deterministic Collections
- **Never use HashMap**: Always use BTreeMap for deterministic ordering
- **Never use HashSet**: Always use BTreeSet for deterministic ordering
- **Ordered keys**: All key types must implement Ord and PartialOrd
- **Consistent iteration**: Ensure consistent iteration order across runs

### Audio Data Structures
- **Audio buffers**: Efficient audio buffer management with RAII
- **Sample formats**: Type-safe sample format handling (i16, i32, f32, f64)
- **Channel layouts**: Proper channel layout representation (mono, stereo, surround)
- **Metadata structures**: Consistent audio metadata representation

### ID Type Patterns
- **Strong typing**: Use newtype wrappers for all ID types (TrackId, AlbumId, etc.)
- **UUID-based**: Use UUID v4 for all ID generation
- **Serialization**: Support serde serialization for all ID types
- **Ordering**: Implement Ord for use in BTreeMap/BTreeSet

```rust
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TrackId(uuid::Uuid);

impl TrackId {
    #[must_use]
    pub fn new() -> Self {
        Self(uuid::Uuid::new_v4())
    }
}
```

### Serialization Patterns
- **SCREAMING_SNAKE_CASE**: Use for all serde rename attributes
- **Consistent naming**: Use same naming convention across all types
- **Optional serde**: Always make serde support optional via features
- **Audio metadata**: Consistent serialization for audio metadata

## Audio-Specific Patterns

### Audio Pipeline Architecture
1. **Input**: File reading and format detection
2. **Decode**: Convert to PCM format using format-specific decoders
3. **Process**: Resampling, effects, filtering, volume control
4. **Encode**: Convert to output format (if needed for streaming)
5. **Output**: Send to audio device or network stream

### Format Support Patterns
- **Conditional compilation**: Use features for format-specific codecs
- **Plugin architecture**: Support for external codec plugins
- **Metadata handling**: Consistent metadata extraction across formats
- **Error recovery**: Graceful handling of corrupted audio files

### Performance Patterns
- **SIMD optimization**: Use SIMD instructions for audio DSP operations
- **Real-time constraints**: Ensure consistent audio processing timing
- **Memory management**: Avoid allocations in audio processing hot paths
- **Buffer management**: Efficient audio buffer pooling and reuse

### Audio Device Integration
- **Platform abstraction**: Common interface for all audio backends
- **Device enumeration**: Discover available audio devices
- **Format negotiation**: Negotiate supported formats with audio devices
- **Latency optimization**: Minimize audio latency for real-time playback

## Database Patterns

### Multi-Database Support
- **Database abstraction**: Common interface for all database types
- **Feature flags**: Optional support for each database type
- **Connection management**: Efficient pooling and connection reuse
- **Schema management**: Version-controlled database migrations

### Music Library Schema
- **Normalized design**: Proper database normalization for music metadata
- **Indexing strategy**: Efficient indexing for music search and browsing
- **Relationship modeling**: Proper modeling of artists, albums, tracks, playlists
- **Full-text search**: Support for searching music metadata

### Performance Optimization
- **Query optimization**: Efficient database queries for music operations
- **Caching strategy**: Strategic caching of frequently accessed music data
- **Batch operations**: Efficient bulk operations for library management
- **Connection pooling**: Manage database connections efficiently

## Web Service Patterns

### API Design
- **RESTful APIs**: Follow REST principles for HTTP APIs
- **Real-time updates**: WebSocket for live music state updates
- **Streaming protocols**: Efficient audio streaming over HTTP
- **Authentication**: Secure user authentication and session management

### Real-time Communication
- **WebSocket protocols**: Efficient protocols for music player state
- **Connection management**: Handle WebSocket connections and reconnection
- **State synchronization**: Keep multiple clients synchronized
- **Event broadcasting**: Broadcast music events to connected clients

### Audio Streaming
- **HTTP streaming**: Efficient HTTP-based audio streaming
- **Range requests**: Support for HTTP range requests for seeking
- **Transcoding**: Real-time audio transcoding for different clients
- **Bandwidth adaptation**: Adapt quality based on network conditions

## UI Framework Patterns (HyperChad)

### Component Architecture
- **Reactive components**: Components that react to state changes
- **Composition patterns**: Compose complex UIs from simple components
- **State management**: Consistent state handling across components
- **Event handling**: Efficient event propagation and handling

### Music Player UI Patterns
- **Playback controls**: Standard music player control components
- **Library browsing**: Efficient browsing of large music libraries
- **Search interface**: Fast and responsive music search UI
- **Playlist management**: Intuitive playlist creation and management

### Performance Patterns
- **Virtual scrolling**: Handle large music libraries efficiently
- **Lazy loading**: Load music metadata and artwork on demand
- **Caching**: Cache UI state and music metadata appropriately
- **Responsive design**: Adapt to different screen sizes and devices

## Testing Patterns

### Audio Testing
- **Format coverage**: Test with various audio formats and qualities
- **Edge cases**: Test with corrupted or unusual audio files
- **Performance testing**: Benchmark audio processing performance
- **Device testing**: Test with different audio devices and configurations

### Integration Testing
- **Full pipeline**: Test complete audio processing pipeline
- **Database integration**: Test with real database connections
- **Web service testing**: Test HTTP/WebSocket endpoints
- **Multi-client testing**: Test multiple simultaneous clients

### Performance Testing
- **Audio latency**: Measure and optimize audio latency
- **Throughput testing**: Test audio streaming throughput
- **Memory profiling**: Monitor memory usage during audio processing
- **Load testing**: Test with many simultaneous users

## Security Patterns

### Audio File Security
- **File parsing safety**: Safe parsing of potentially malicious audio files
- **Memory safety**: Prevent buffer overflows in audio processing
- **Codec security**: Use secure audio codec implementations
- **Sandbox isolation**: Isolate audio processing from system access

### Web Security
- **Authentication**: Secure user authentication and session management
- **Authorization**: Proper access control for music libraries
- **Input validation**: Validate all web inputs before processing
- **HTTPS enforcement**: Require HTTPS for all web communications

### Database Security
- **SQL injection prevention**: Use parameterized queries
- **Access control**: Proper database access control
- **Encryption**: Encrypt sensitive data at rest
- **Audit logging**: Log security-relevant database operations

## Cross-Platform Considerations

### Audio Platform Support
- **Linux**: ALSA, PulseAudio, JACK support
- **macOS**: CoreAudio integration
- **Windows**: WASAPI, DirectSound support
- **Mobile**: Consider iOS/Android audio backends

### File System Support
- **Path handling**: Cross-platform path handling
- **File watching**: Monitor music library changes
- **Network shares**: Support for network-mounted music libraries
- **Permissions**: Handle file system permissions appropriately

### Performance Optimization
- **Platform-specific optimizations**: Use platform-specific audio optimizations
- **SIMD support**: Detect and use available SIMD instructions
- **Threading**: Efficient threading for audio processing
- **Memory management**: Platform-appropriate memory management strategies
