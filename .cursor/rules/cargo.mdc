description: "Cargo-specific development patterns, workspace management, and best practices for MoosicBox"
---

# Cargo Development Guidelines for MoosicBox

## Workspace Structure

MoosicBox uses a Cargo workspace with 120+ packages organized by domain functionality. The main workspace configuration is in @Cargo.toml.

### Package Organization Philosophy
- **Domain-Driven Design**: Packages are organized by business domain and functionality
- **Modular Architecture**: Clear separation between different areas of functionality
- **Minimal Dependencies**: Each package only depends on what it actually needs
- **Underscore Naming**: All packages use underscore naming (e.g., `moosicbox_audio_decoder`)

### Package Categories
- **Audio Processing**: Decoding, encoding, resampling, output (@packages/audio_*)
- **Database**: Connection management, schema, migrations (@packages/database*)
- **Web Services**: HTTP, WebSocket, APIs (@packages/web_*, @packages/ws*)
- **UI Framework**: HyperChad framework packages (@packages/hyperchad/*)
- **Infrastructure**: Logging, config, utilities (@packages/logging/, @packages/config/)
- **Core Services**: Player, library management, streaming (@packages/player/, @packages/library/)

### Directory Structure
- Each package lives in `packages/**/[package-name]/`
- Package names follow the pattern `moosicbox_[functionality]`
- Related packages are grouped (e.g., `packages/hyperchad/` contains UI framework packages)
- Nested packages allowed for logical grouping (e.g., `packages/audio/decoder/`)

## Workspace Dependencies Management

### Internal Package Dependencies
- **Always use `workspace = true`**: Never use path-based dependencies
- **Proper organization**: Internal packages listed first, external packages second
- **Clean separation**: Use comment headers to separate sections

```toml
[dependencies]
# Internal MoosicBox packages
moosicbox_audio_decoder = { workspace = true }
moosicbox_config = { workspace = true }

# External dependencies
anyhow = { workspace = true, features = ["std"] }
tokio = { workspace = true, features = ["rt"] }
```

### External Dependencies
- **Full version numbers**: Always use complete semantic versions (e.g., "6.0.0", not "6.0")
- **Latest versions**: Always use the latest stable version available
- **Minimal features**: Use `default-features = false` in the workspace definition. Only enable needed features in the specific packages that need them.
- **Consistent workspace definitions**: All external deps defined once in workspace root

## Feature Flag Patterns

### Feature Organization Structure
All packages must follow this exact feature organization:

```toml
[features]
# Default features
default = ["serde"]

# Development features
fail-on-warnings = []

# Optional features
api = ["dep:reqwest"]
audio = ["moosicbox_audio_decoder/default"]

# Serialization features
serde = ["dep:serde", "uuid/serde"]
```

### Feature Sections (Required Order)
1. **Default features** - Always first, even if empty `default = []`
2. **Development features** - `fail-on-warnings = []` always present
3. **Additional sections** - Grouped intelligently:
   - **Feature groups** (for main packages)
   - **API features** (for web services)
   - **Audio features** (for audio processing)
   - **Database features** (for database support)
   - **Optional features** (heavy dependencies)
   - **Serialization features** (serde support)

## Code Quality Standards

### Clippy Configuration
Every package must have these clippy attributes in lib.rs and/or main.rs:

```rust
#![cfg_attr(feature = "fail-on-warnings", deny(warnings))]
#![warn(clippy::all, clippy::pedantic, clippy::nursery, clippy::cargo)]
#![allow(clippy::multiple_crate_versions)]
```

### Error Handling Patterns
- **Use `#[must_use]`**: On all constructors and getter methods
- **Document errors**: Use bullet points with asterisks (*) for error documentation
- **Comprehensive docs**: Document all possible error conditions

### Documentation Standards
- **Bullet points**: Use asterisks (*) not dashes (-) for bullet points in comments
- **Comprehensive docs**: Document all public APIs with examples where helpful
- **Error documentation**: Always document possible errors for Result-returning functions

## Dependency Patterns

### Deterministic Collections
- **Never use HashMap**: Always use BTreeMap for deterministic behavior
- **Never use HashSet**: Always use BTreeSet for deterministic behavior
- **Ordered keys**: Ensure all key types implement Ord and PartialOrd
- **Consistent iteration**: Ensure consistent iteration order across runs

## EditorConfig Compliance

### Formatting Rules
- **No trailing whitespace**: `trim_trailing_whitespace = true`
- **LF line endings**: `end_of_line = lf`
- **Final newline**: `insert_final_newline = true`
- **Space indentation**: 4 spaces for TOML, JSON, YAML files

### Code Quality
- **Consistent formatting**: All files must follow .editorconfig rules
- **Automated checking**: Use tools to verify editorconfig compliance
