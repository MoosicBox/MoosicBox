---
description: "Audio processing pipeline, components, and hi-fi streaming architecture"
globs:
  - "packages/audio_*/**/*"
  - "packages/player/**/*"
  - "packages/resampler/**/*"
---

# Audio Processing in MoosicBox

## Audio Pipeline Architecture

MoosicBox implements a sophisticated audio processing pipeline designed for high-fidelity streaming and multi-format support.

### Core Audio Components

#### Audio Decoder (@packages/audio_decoder/)
- **Purpose**: Decode various audio formats to raw PCM data
- **Supported Formats**: FLAC, ALAC, MP3, AAC, Opus, WAV
- **Key Features**:
  - Format-specific decoder implementations
  - Metadata extraction (sample rate, bit depth, channels)
  - Streaming decode support for large files
  - Error handling for corrupted audio files

#### Audio Encoder (@packages/audio_encoder/)
- **Purpose**: Real-time encoding for streaming optimization
- **Output Formats**: AAC, MP3, Opus
- **Features**:
  - Quality-based encoding (bitrate selection)
  - Low-latency streaming optimization
  - Multiple quality tiers for different network conditions
  - Configurable encoding parameters

#### Audio Output (@packages/audio_output/)
- **Purpose**: Handle audio playback to various output devices
- **Capabilities**:
  - Multiple output device support
  - Sample rate matching and conversion
  - Volume control and audio mixing
  - Cross-platform audio driver integration

#### Resampler (@packages/resampler/)
- **Purpose**: Convert between different sample rates
- **Use Cases**:
  - Matching output device capabilities
  - Network bandwidth optimization
  - Quality tier adaptation
- **Algorithm**: High-quality resampling with configurable filters

### Multi-Zone Audio (@packages/audio_zone/)

#### Zone Management
- **Concept**: Play different music in different physical locations
- **Features**:
  - Independent volume control per zone
  - Synchronized playback across zones
  - Zone grouping and ungrouping
  - Individual zone pause/play control

#### Zone Models (@packages/audio_zone/models/)
- Data structures for zone configuration
- Zone state management
- Inter-zone communication protocols

### Player Engine (@packages/player/)

#### Core Player Features
- **Playback Control**: Play, pause, stop, seek, skip
- **Queue Management**: Add/remove tracks, shuffle, repeat modes
- **Gapless Playback**: Seamless transitions between tracks
- **Crossfade**: Smooth audio transitions
- **Volume Control**: Linear and logarithmic volume curves

#### State Management
- Current track information
- Playback position tracking
- Queue state persistence
- Resume playback after restart

## Audio Quality Considerations

### Hi-Fi Support
- **Lossless Formats**: FLAC, ALAC support with bit-perfect playback
- **High Sample Rates**: Support for 192kHz/24-bit audio
- **No Audio Degradation**: Preserve original audio quality through pipeline
- **Configurable Quality**: Allow quality vs. bandwidth trade-offs

### Performance Optimization
- **Low-Latency Processing**: Minimize audio processing delays
- **Memory Efficient**: Stream processing without loading entire files
- **CPU Optimization**: SIMD instructions for audio DSP operations
- **Background Processing**: Non-blocking audio operations

## Integration Points

### Music API Integration (@packages/music_api/)
- Audio metadata extraction and caching
- Format detection and capability negotiation
- Streaming URL generation for different qualities

### Library Management (@packages/library/)
- Audio file scanning and indexing
- Format and quality detection
- Waveform generation for visualization

### Streaming Services
- **Tidal**: @packages/tidal/ - Hi-Fi and MQA streaming
- **Qobuz**: @packages/qobuz/ - Studio quality streaming
- Integration with native audio processing pipeline

## Development Guidelines

### Audio Processing Best Practices
- Always handle audio in separate threads from UI
- Use ring buffers for low-latency audio streaming
- Implement proper error recovery for audio device failures
- Test with various audio formats and sample rates

### Testing Audio Components
- Unit tests with sample audio files
- Format compatibility testing
- Performance benchmarks for different audio qualities
- Cross-platform audio driver testing

### Debugging Audio Issues
- Use audio visualization tools for debugging
- Log audio pipeline stages for troubleshooting
- Monitor for audio dropouts and glitches
- Validate audio metadata extraction

## Configuration

### Audio Settings
- Default output device selection
- Sample rate conversion preferences
- Audio buffer sizes for latency tuning
- Quality presets for different use cases

### Environment Variables
- `MOOSICBOX_AUDIO_DEVICE` - Override audio output device
- `RUST_LOG=moosicbox_audio=debug` - Audio component logging
- `MOOSICBOX_AUDIO_BUFFER_SIZE` - Audio buffer configuration

